/*
 * generated by Xtext
 */
package org.xtext.hipie.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HIPIEGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComposition_headerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComposition_headerCompositionHeaderParserRuleCall_0_0 = (RuleCall)cComposition_headerAssignment_0.eContents().get(0);
		private final Assignment cBase_propsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBase_propsBasePropParserRuleCall_1_0 = (RuleCall)cBase_propsAssignment_1.eContents().get(0);
		private final Assignment cPermissionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPermissionsPermissionsParserRuleCall_2_0 = (RuleCall)cPermissionsAssignment_2.eContents().get(0);
		private final Assignment cInput_sectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInput_sectionInputSectionParserRuleCall_3_0 = (RuleCall)cInput_sectionAssignment_3.eContents().get(0);
		private final Assignment cContract_instancesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContract_instancesContractInstanceParserRuleCall_4_0 = (RuleCall)cContract_instancesAssignment_4.eContents().get(0);
		private final Assignment cOutput_sectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutput_sectionOutputSectionParserRuleCall_5_0 = (RuleCall)cOutput_sectionAssignment_5.eContents().get(0);
		private final Assignment cIntegrate_sectionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIntegrate_sectionIntegrateSectionParserRuleCall_6_0 = (RuleCall)cIntegrate_sectionAssignment_6.eContents().get(0);
		private final Assignment cVisual_sectionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVisual_sectionVisualSectionParserRuleCall_7_0 = (RuleCall)cVisual_sectionAssignment_7.eContents().get(0);
		private final Assignment cGenerate_sectionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGenerate_sectionGenerateSectionParserRuleCall_8_0 = (RuleCall)cGenerate_sectionAssignment_8.eContents().get(0);
		private final Assignment cCustom_sectionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCustom_sectionCustomSectionParserRuleCall_9_0 = (RuleCall)cCustom_sectionAssignment_9.eContents().get(0);
		private final Assignment cResource_sectionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cResource_sectionResourceSectionParserRuleCall_10_0 = (RuleCall)cResource_sectionAssignment_10.eContents().get(0);
		
		//Program:
		//	composition_header+=CompositionHeader? base_props+=BaseProp+ permissions=Permissions? input_section+=InputSection?
		//	contract_instances+=ContractInstance* output_section+=OutputSection? integrate_section=IntegrateSection?
		//	visual_section+=VisualSection* generate_section+=GenerateSection? custom_section+=CustomSection?
		//	resource_section+=ResourceSection?;
		@Override public ParserRule getRule() { return rule; }

		//composition_header+=CompositionHeader? base_props+=BaseProp+ permissions=Permissions? input_section+=InputSection?
		//contract_instances+=ContractInstance* output_section+=OutputSection? integrate_section=IntegrateSection?
		//visual_section+=VisualSection* generate_section+=GenerateSection? custom_section+=CustomSection?
		//resource_section+=ResourceSection?
		public Group getGroup() { return cGroup; }

		//composition_header+=CompositionHeader?
		public Assignment getComposition_headerAssignment_0() { return cComposition_headerAssignment_0; }

		//CompositionHeader
		public RuleCall getComposition_headerCompositionHeaderParserRuleCall_0_0() { return cComposition_headerCompositionHeaderParserRuleCall_0_0; }

		//base_props+=BaseProp+
		public Assignment getBase_propsAssignment_1() { return cBase_propsAssignment_1; }

		//BaseProp
		public RuleCall getBase_propsBasePropParserRuleCall_1_0() { return cBase_propsBasePropParserRuleCall_1_0; }

		//permissions=Permissions?
		public Assignment getPermissionsAssignment_2() { return cPermissionsAssignment_2; }

		//Permissions
		public RuleCall getPermissionsPermissionsParserRuleCall_2_0() { return cPermissionsPermissionsParserRuleCall_2_0; }

		//input_section+=InputSection?
		public Assignment getInput_sectionAssignment_3() { return cInput_sectionAssignment_3; }

		//InputSection
		public RuleCall getInput_sectionInputSectionParserRuleCall_3_0() { return cInput_sectionInputSectionParserRuleCall_3_0; }

		//contract_instances+=ContractInstance*
		public Assignment getContract_instancesAssignment_4() { return cContract_instancesAssignment_4; }

		//ContractInstance
		public RuleCall getContract_instancesContractInstanceParserRuleCall_4_0() { return cContract_instancesContractInstanceParserRuleCall_4_0; }

		//output_section+=OutputSection?
		public Assignment getOutput_sectionAssignment_5() { return cOutput_sectionAssignment_5; }

		//OutputSection
		public RuleCall getOutput_sectionOutputSectionParserRuleCall_5_0() { return cOutput_sectionOutputSectionParserRuleCall_5_0; }

		//integrate_section=IntegrateSection?
		public Assignment getIntegrate_sectionAssignment_6() { return cIntegrate_sectionAssignment_6; }

		//IntegrateSection
		public RuleCall getIntegrate_sectionIntegrateSectionParserRuleCall_6_0() { return cIntegrate_sectionIntegrateSectionParserRuleCall_6_0; }

		//visual_section+=VisualSection*
		public Assignment getVisual_sectionAssignment_7() { return cVisual_sectionAssignment_7; }

		//VisualSection
		public RuleCall getVisual_sectionVisualSectionParserRuleCall_7_0() { return cVisual_sectionVisualSectionParserRuleCall_7_0; }

		//generate_section+=GenerateSection?
		public Assignment getGenerate_sectionAssignment_8() { return cGenerate_sectionAssignment_8; }

		//GenerateSection
		public RuleCall getGenerate_sectionGenerateSectionParserRuleCall_8_0() { return cGenerate_sectionGenerateSectionParserRuleCall_8_0; }

		//custom_section+=CustomSection?
		public Assignment getCustom_sectionAssignment_9() { return cCustom_sectionAssignment_9; }

		//CustomSection
		public RuleCall getCustom_sectionCustomSectionParserRuleCall_9_0() { return cCustom_sectionCustomSectionParserRuleCall_9_0; }

		//resource_section+=ResourceSection?
		public Assignment getResource_sectionAssignment_10() { return cResource_sectionAssignment_10; }

		//ResourceSection
		public RuleCall getResource_sectionResourceSectionParserRuleCall_10_0() { return cResource_sectionResourceSectionParserRuleCall_10_0; }
	}

	public class BasePropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseProp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cNameNAMEKeyword_0_0_0_0 = (Keyword)cNameAssignment_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNameDESCRIPTIONKeyword_0_0_1_0 = (Keyword)cNameAssignment_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final Keyword cNameAUTHORKeyword_0_0_2_0 = (Keyword)cNameAssignment_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_0_3 = (Assignment)cAlternatives_0_0.eContents().get(3);
		private final Keyword cNameLICENSEKeyword_0_0_3_0 = (Keyword)cNameAssignment_0_0_3.eContents().get(0);
		private final Assignment cNameAssignment_0_0_4 = (Assignment)cAlternatives_0_0.eContents().get(4);
		private final Keyword cNameCOPYRIGHTKeyword_0_0_4_0 = (Keyword)cNameAssignment_0_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_0_5 = (Assignment)cAlternatives_0_0.eContents().get(5);
		private final Keyword cNameVERSIONKeyword_0_0_5_0 = (Keyword)cNameAssignment_0_0_5.eContents().get(0);
		private final Assignment cNameAssignment_0_0_6 = (Assignment)cAlternatives_0_0.eContents().get(6);
		private final Keyword cNameLABELKeyword_0_0_6_0 = (Keyword)cNameAssignment_0_0_6.eContents().get(0);
		private final Assignment cNameAssignment_0_0_7 = (Assignment)cAlternatives_0_0.eContents().get(7);
		private final Keyword cNameIDKeyword_0_0_7_0 = (Keyword)cNameAssignment_0_0_7.eContents().get(0);
		private final Assignment cNameAssignment_0_0_8 = (Assignment)cAlternatives_0_0.eContents().get(8);
		private final Keyword cNameTEMPLATEKeyword_0_0_8_0 = (Keyword)cNameAssignment_0_0_8.eContents().get(0);
		private final Assignment cVal_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVal_listValueListParserRuleCall_0_1_0 = (RuleCall)cVal_listAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameCATEGORYKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cCat_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCat_listCategoryTypeListParserRuleCall_1_1_0 = (RuleCall)cCat_listAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BaseProp:
		//	(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL"
		//	| name="ID" | name="TEMPLATE") val_list=ValueList ";" | name="CATEGORY" cat_list=CategoryTypeList ";";
		@Override public ParserRule getRule() { return rule; }

		//(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL" |
		//name="ID" | name="TEMPLATE") val_list=ValueList ";" | name="CATEGORY" cat_list=CategoryTypeList ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL" |
		//name="ID" | name="TEMPLATE") val_list=ValueList ";"
		public Group getGroup_0() { return cGroup_0; }

		//name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL" |
		//name="ID" | name="TEMPLATE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//name="NAME"
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }

		//"NAME"
		public Keyword getNameNAMEKeyword_0_0_0_0() { return cNameNAMEKeyword_0_0_0_0; }

		//name="DESCRIPTION"
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//"DESCRIPTION"
		public Keyword getNameDESCRIPTIONKeyword_0_0_1_0() { return cNameDESCRIPTIONKeyword_0_0_1_0; }

		//name="AUTHOR"
		public Assignment getNameAssignment_0_0_2() { return cNameAssignment_0_0_2; }

		//"AUTHOR"
		public Keyword getNameAUTHORKeyword_0_0_2_0() { return cNameAUTHORKeyword_0_0_2_0; }

		//name="LICENSE"
		public Assignment getNameAssignment_0_0_3() { return cNameAssignment_0_0_3; }

		//"LICENSE"
		public Keyword getNameLICENSEKeyword_0_0_3_0() { return cNameLICENSEKeyword_0_0_3_0; }

		//name="COPYRIGHT"
		public Assignment getNameAssignment_0_0_4() { return cNameAssignment_0_0_4; }

		//"COPYRIGHT"
		public Keyword getNameCOPYRIGHTKeyword_0_0_4_0() { return cNameCOPYRIGHTKeyword_0_0_4_0; }

		//name="VERSION"
		public Assignment getNameAssignment_0_0_5() { return cNameAssignment_0_0_5; }

		//"VERSION"
		public Keyword getNameVERSIONKeyword_0_0_5_0() { return cNameVERSIONKeyword_0_0_5_0; }

		//name="LABEL"
		public Assignment getNameAssignment_0_0_6() { return cNameAssignment_0_0_6; }

		//"LABEL"
		public Keyword getNameLABELKeyword_0_0_6_0() { return cNameLABELKeyword_0_0_6_0; }

		//name="ID"
		public Assignment getNameAssignment_0_0_7() { return cNameAssignment_0_0_7; }

		//"ID"
		public Keyword getNameIDKeyword_0_0_7_0() { return cNameIDKeyword_0_0_7_0; }

		//name="TEMPLATE"
		public Assignment getNameAssignment_0_0_8() { return cNameAssignment_0_0_8; }

		//"TEMPLATE"
		public Keyword getNameTEMPLATEKeyword_0_0_8_0() { return cNameTEMPLATEKeyword_0_0_8_0; }

		//val_list=ValueList
		public Assignment getVal_listAssignment_0_1() { return cVal_listAssignment_0_1; }

		//ValueList
		public RuleCall getVal_listValueListParserRuleCall_0_1_0() { return cVal_listValueListParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//name="CATEGORY" cat_list=CategoryTypeList ";"
		public Group getGroup_1() { return cGroup_1; }

		//name="CATEGORY"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"CATEGORY"
		public Keyword getNameCATEGORYKeyword_1_0_0() { return cNameCATEGORYKeyword_1_0_0; }

		//cat_list=CategoryTypeList
		public Assignment getCat_listAssignment_1_1() { return cCat_listAssignment_1_1; }

		//CategoryTypeList
		public RuleCall getCat_listCategoryTypeListParserRuleCall_1_1_0() { return cCat_listCategoryTypeListParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class CategoryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CategoryType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameCLEANKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameINPUTKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameAPPENDKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameLINKKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameANALYSISKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameCUSTOMKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameVISUALIZEKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		private final Keyword cNameOUTPUTKeyword_0_7 = (Keyword)cNameAlternatives_0.eContents().get(7);
		
		//CategoryType:
		//	name=("CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT");
		@Override public ParserRule getRule() { return rule; }

		//name=("CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT")
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT"
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//"CLEAN"
		public Keyword getNameCLEANKeyword_0_0() { return cNameCLEANKeyword_0_0; }

		//"INPUT"
		public Keyword getNameINPUTKeyword_0_1() { return cNameINPUTKeyword_0_1; }

		//"APPEND"
		public Keyword getNameAPPENDKeyword_0_2() { return cNameAPPENDKeyword_0_2; }

		//"LINK"
		public Keyword getNameLINKKeyword_0_3() { return cNameLINKKeyword_0_3; }

		//"ANALYSIS"
		public Keyword getNameANALYSISKeyword_0_4() { return cNameANALYSISKeyword_0_4; }

		//"CUSTOM"
		public Keyword getNameCUSTOMKeyword_0_5() { return cNameCUSTOMKeyword_0_5; }

		//"VISUALIZE"
		public Keyword getNameVISUALIZEKeyword_0_6() { return cNameVISUALIZEKeyword_0_6; }

		//"OUTPUT"
		public Keyword getNameOUTPUTKeyword_0_7() { return cNameOUTPUTKeyword_0_7; }
	}

	public class CategoryTypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CategoryTypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCatsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCatsCategoryTypeParserRuleCall_0_0 = (RuleCall)cCatsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCatsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCatsCategoryTypeParserRuleCall_1_1_0 = (RuleCall)cCatsAssignment_1_1.eContents().get(0);
		
		//CategoryTypeList:
		//	cats+=CategoryType ("," cats+=CategoryType)*;
		@Override public ParserRule getRule() { return rule; }

		//cats+=CategoryType ("," cats+=CategoryType)*
		public Group getGroup() { return cGroup; }

		//cats+=CategoryType
		public Assignment getCatsAssignment_0() { return cCatsAssignment_0; }

		//CategoryType
		public RuleCall getCatsCategoryTypeParserRuleCall_0_0() { return cCatsCategoryTypeParserRuleCall_0_0; }

		//("," cats+=CategoryType)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//cats+=CategoryType
		public Assignment getCatsAssignment_1_1() { return cCatsAssignment_1_1; }

		//CategoryType
		public RuleCall getCatsCategoryTypeParserRuleCall_1_1_0() { return cCatsCategoryTypeParserRuleCall_1_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameUTOKENParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInt_valAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInt_valINTTerminalRuleCall_2_0 = (RuleCall)cInt_valAssignment_2.eContents().get(0);
		private final Assignment cStr_valAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStr_valSTRINGTerminalRuleCall_3_0 = (RuleCall)cStr_valAssignment_3.eContents().get(0);
		
		//Value:
		//	name=UTOKEN | name=TOKEN | int_val=INT | str_val=STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=UTOKEN | name=TOKEN | int_val=INT | str_val=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=UTOKEN
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//UTOKEN
		public RuleCall getNameUTOKENParserRuleCall_0_0() { return cNameUTOKENParserRuleCall_0_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//int_val=INT
		public Assignment getInt_valAssignment_2() { return cInt_valAssignment_2; }

		//INT
		public RuleCall getInt_valINTTerminalRuleCall_2_0() { return cInt_valINTTerminalRuleCall_2_0; }

		//str_val=STRING
		public Assignment getStr_valAssignment_3() { return cStr_valAssignment_3; }

		//STRING
		public RuleCall getStr_valSTRINGTerminalRuleCall_3_0() { return cStr_valSTRINGTerminalRuleCall_3_0; }
	}

	public class ValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValsValueParserRuleCall_0_0 = (RuleCall)cValsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_1_1_0 = (RuleCall)cValsAssignment_1_1.eContents().get(0);
		
		//ValueList:
		//	vals+=Value ("," vals+=Value)*;
		@Override public ParserRule getRule() { return rule; }

		//vals+=Value ("," vals+=Value)*
		public Group getGroup() { return cGroup; }

		//vals+=Value
		public Assignment getValsAssignment_0() { return cValsAssignment_0; }

		//Value
		public RuleCall getValsValueParserRuleCall_0_0() { return cValsValueParserRuleCall_0_0; }

		//("," vals+=Value)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vals+=Value
		public Assignment getValsAssignment_1_1() { return cValsAssignment_1_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_1_1_0() { return cValsValueParserRuleCall_1_1_0; }
	}

	public class TOKENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOKEN");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TOKEN:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class UTOKENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UTOKEN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//UTOKEN:
		//	"_" ID;
		@Override public ParserRule getRule() { return rule; }

		//"_" ID
		public Group getGroup() { return cGroup; }

		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class TOKEN_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOKEN_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOKENParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTOKENParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TOKEN_list:
		//	TOKEN ("," TOKEN)*;
		@Override public ParserRule getRule() { return rule; }

		//TOKEN ("," TOKEN)*
		public Group getGroup() { return cGroup; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_0() { return cTOKENParserRuleCall_0; }

		//("," TOKEN)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_1_1() { return cTOKENParserRuleCall_1_1; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVals_lAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVals_lValueParserRuleCall_0_0 = (RuleCall)cVals_lAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVals_rAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVals_rValueListParserRuleCall_2_0 = (RuleCall)cVals_rAssignment_2.eContents().get(0);
		
		//Assign:
		//	vals_l=Value "=" vals_r=ValueList;
		@Override public ParserRule getRule() { return rule; }

		//vals_l=Value "=" vals_r=ValueList
		public Group getGroup() { return cGroup; }

		//vals_l=Value
		public Assignment getVals_lAssignment_0() { return cVals_lAssignment_0; }

		//Value
		public RuleCall getVals_lValueParserRuleCall_0_0() { return cVals_lValueParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//vals_r=ValueList
		public Assignment getVals_rAssignment_2() { return cVals_rAssignment_2; }

		//ValueList
		public RuleCall getVals_rValueListParserRuleCall_2_0() { return cVals_rValueListParserRuleCall_2_0; }
	}

	public class AssignListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignsAssignParserRuleCall_0_0 = (RuleCall)cAssignsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignsAssignParserRuleCall_1_1_0 = (RuleCall)cAssignsAssignment_1_1.eContents().get(0);
		
		//AssignList:
		//	assigns+=Assign ("," assigns+=Assign)*;
		@Override public ParserRule getRule() { return rule; }

		//assigns+=Assign ("," assigns+=Assign)*
		public Group getGroup() { return cGroup; }

		//assigns+=Assign
		public Assignment getAssignsAssignment_0() { return cAssignsAssignment_0; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_0_0() { return cAssignsAssignParserRuleCall_0_0; }

		//("," assigns+=Assign)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//assigns+=Assign
		public Assignment getAssignsAssignment_1_1() { return cAssignsAssignment_1_1; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_1_1_0() { return cAssignsAssignParserRuleCall_1_1_0; }
	}

	public class CompositionHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositionHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameHEADERKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cAssignsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignsAssignParserRuleCall_1_0 = (RuleCall)cAssignsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CompositionHeader:
		//	name="HEADER" assigns+=Assign* => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="HEADER" assigns+=Assign* => "END"
		public Group getGroup() { return cGroup; }

		//name="HEADER"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"HEADER"
		public Keyword getNameHEADERKeyword_0_0() { return cNameHEADERKeyword_0_0; }

		//assigns+=Assign*
		public Assignment getAssignsAssignment_1() { return cAssignsAssignment_1; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_1_0() { return cAssignsAssignParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class InstanceIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InstanceID:
		//	"(" name=TOKEN ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" name=TOKEN ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class InstanceOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIn_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIn_opsInstanceOptionParserRuleCall_1_0 = (RuleCall)cIn_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIn_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIn_opsInstanceOptionParserRuleCall_2_1_0 = (RuleCall)cIn_opsAssignment_2_1.eContents().get(0);
		
		//InstanceOptions:
		//	":" in_ops+=InstanceOption ("," in_ops+=InstanceOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" in_ops+=InstanceOption ("," in_ops+=InstanceOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//in_ops+=InstanceOption
		public Assignment getIn_opsAssignment_1() { return cIn_opsAssignment_1; }

		//InstanceOption
		public RuleCall getIn_opsInstanceOptionParserRuleCall_1_0() { return cIn_opsInstanceOptionParserRuleCall_1_0; }

		//("," in_ops+=InstanceOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//in_ops+=InstanceOption
		public Assignment getIn_opsAssignment_2_1() { return cIn_opsAssignment_2_1; }

		//InstanceOption
		public RuleCall getIn_opsInstanceOptionParserRuleCall_2_1_0() { return cIn_opsInstanceOptionParserRuleCall_2_1_0; }
	}

	public class InstanceOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLABELKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVERSIONKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cValueListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InstanceOption:
		//	("LABEL" | "VERSION") "(" ValueList ")";
		@Override public ParserRule getRule() { return rule; }

		//("LABEL" | "VERSION") "(" ValueList ")"
		public Group getGroup() { return cGroup; }

		//"LABEL" | "VERSION"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"LABEL"
		public Keyword getLABELKeyword_0_0() { return cLABELKeyword_0_0; }

		//"VERSION"
		public Keyword getVERSIONKeyword_0_1() { return cVERSIONKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ValueList
		public RuleCall getValueListParserRuleCall_2() { return cValueListParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ContractInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContractInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSec_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSec_nameINSTANCEKeyword_0_0 = (Keyword)cSec_nameAssignment_0.eContents().get(0);
		private final RuleCall cTOKENParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInstIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstIdInstanceIDParserRuleCall_2_0 = (RuleCall)cInstIdAssignment_2.eContents().get(0);
		private final Assignment cInstance_opsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstance_opsInstanceOptionsParserRuleCall_3_0 = (RuleCall)cInstance_opsAssignment_3.eContents().get(0);
		private final Assignment cAssignsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAssignsAssignParserRuleCall_4_0 = (RuleCall)cAssignsAssignment_4.eContents().get(0);
		private final Keyword cENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ContractInstance:
		//	sec_name="INSTANCE" TOKEN instId=InstanceID instance_ops=InstanceOptions? assigns+=Assign* "END";
		@Override public ParserRule getRule() { return rule; }

		//sec_name="INSTANCE" TOKEN instId=InstanceID instance_ops=InstanceOptions? assigns+=Assign* "END"
		public Group getGroup() { return cGroup; }

		//sec_name="INSTANCE"
		public Assignment getSec_nameAssignment_0() { return cSec_nameAssignment_0; }

		//"INSTANCE"
		public Keyword getSec_nameINSTANCEKeyword_0_0() { return cSec_nameINSTANCEKeyword_0_0; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_1() { return cTOKENParserRuleCall_1; }

		//instId=InstanceID
		public Assignment getInstIdAssignment_2() { return cInstIdAssignment_2; }

		//InstanceID
		public RuleCall getInstIdInstanceIDParserRuleCall_2_0() { return cInstIdInstanceIDParserRuleCall_2_0; }

		//instance_ops=InstanceOptions?
		public Assignment getInstance_opsAssignment_3() { return cInstance_opsAssignment_3; }

		//InstanceOptions
		public RuleCall getInstance_opsInstanceOptionsParserRuleCall_3_0() { return cInstance_opsInstanceOptionsParserRuleCall_3_0; }

		//assigns+=Assign*
		public Assignment getAssignsAssignment_4() { return cAssignsAssignment_4; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_4_0() { return cAssignsAssignParserRuleCall_4_0; }

		//"END"
		public Keyword getENDKeyword_5() { return cENDKeyword_5; }
	}

	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFIELDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInput_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInput_opsInputOptionsParserRuleCall_2_0 = (RuleCall)cInput_opsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FieldDecl:
		//	"FIELD" name=TOKEN input_ops=InputOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//"FIELD" name=TOKEN input_ops=InputOptions? ";"
		public Group getGroup() { return cGroup; }

		//"FIELD"
		public Keyword getFIELDKeyword_0() { return cFIELDKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//input_ops=InputOptions?
		public Assignment getInput_opsAssignment_2() { return cInput_opsAssignment_2; }

		//InputOptions
		public RuleCall getInput_opsInputOptionsParserRuleCall_2_0() { return cInput_opsInputOptionsParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class KelAttrDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KelAttrDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cATTRIBUTEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInput_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInput_opsInputOptionsParserRuleCall_2_0 = (RuleCall)cInput_opsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KelAttrDecl:
		//	"ATTRIBUTE" name=TOKEN input_ops=InputOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//"ATTRIBUTE" name=TOKEN input_ops=InputOptions? ";"
		public Group getGroup() { return cGroup; }

		//"ATTRIBUTE"
		public Keyword getATTRIBUTEKeyword_0() { return cATTRIBUTEKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//input_ops=InputOptions?
		public Assignment getInput_opsAssignment_2() { return cInput_opsAssignment_2; }

		//InputOptions
		public RuleCall getInput_opsInputOptionsParserRuleCall_2_0() { return cInput_opsInputOptionsParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class KelEntityDeclSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KelEntityDeclSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENTITYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInput_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInput_opsInputOptionsParserRuleCall_2_0 = (RuleCall)cInput_opsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KelEntityDeclSimple:
		//	"ENTITY" name=TOKEN input_ops=InputOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//"ENTITY" name=TOKEN input_ops=InputOptions? ";"
		public Group getGroup() { return cGroup; }

		//"ENTITY"
		public Keyword getENTITYKeyword_0() { return cENTITYKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//input_ops=InputOptions?
		public Assignment getInput_opsAssignment_2() { return cInput_opsAssignment_2; }

		//InputOptions
		public RuleCall getInput_opsInputOptionsParserRuleCall_2_0() { return cInput_opsInputOptionsParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class KelEntityDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KelEntityDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENTITYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInput_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInput_opsInputOptionsParserRuleCall_2_0 = (RuleCall)cInput_opsAssignment_2.eContents().get(0);
		private final Assignment cAttrdeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttrdeclKelAttrDeclParserRuleCall_3_0 = (RuleCall)cAttrdeclAssignment_3.eContents().get(0);
		private final Keyword cENDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//KelEntityDecl:
		//	"ENTITY" name=TOKEN input_ops=InputOptions? attrdecl=KelAttrDecl? => "END";
		@Override public ParserRule getRule() { return rule; }

		//"ENTITY" name=TOKEN input_ops=InputOptions? attrdecl=KelAttrDecl? => "END"
		public Group getGroup() { return cGroup; }

		//"ENTITY"
		public Keyword getENTITYKeyword_0() { return cENTITYKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//input_ops=InputOptions?
		public Assignment getInput_opsAssignment_2() { return cInput_opsAssignment_2; }

		//InputOptions
		public RuleCall getInput_opsInputOptionsParserRuleCall_2_0() { return cInput_opsInputOptionsParserRuleCall_2_0; }

		//attrdecl=KelAttrDecl?
		public Assignment getAttrdeclAssignment_3() { return cAttrdeclAssignment_3; }

		//KelAttrDecl
		public RuleCall getAttrdeclKelAttrDeclParserRuleCall_3_0() { return cAttrdeclKelAttrDeclParserRuleCall_3_0; }

		//=> "END"
		public Keyword getENDKeyword_4() { return cENDKeyword_4; }
	}

	public class EnumEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVal_lAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVal_lValueParserRuleCall_0_0 = (RuleCall)cVal_lAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVal_rAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVal_rValueParserRuleCall_1_1_0 = (RuleCall)cVal_rAssignment_1_1.eContents().get(0);
		
		//EnumEntry:
		//	val_l=Value ("=" val_r=Value)?;
		@Override public ParserRule getRule() { return rule; }

		//val_l=Value ("=" val_r=Value)?
		public Group getGroup() { return cGroup; }

		//val_l=Value
		public Assignment getVal_lAssignment_0() { return cVal_lAssignment_0; }

		//Value
		public RuleCall getVal_lValueParserRuleCall_0_0() { return cVal_lValueParserRuleCall_0_0; }

		//("=" val_r=Value)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//val_r=Value
		public Assignment getVal_rAssignment_1_1() { return cVal_rAssignment_1_1; }

		//Value
		public RuleCall getVal_rValueParserRuleCall_1_1_0() { return cVal_rValueParserRuleCall_1_1_0; }
	}

	public class EnumListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEn_entsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEn_entsEnumEntryParserRuleCall_0_0 = (RuleCall)cEn_entsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEn_entsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEn_entsEnumEntryParserRuleCall_1_1_0 = (RuleCall)cEn_entsAssignment_1_1.eContents().get(0);
		
		//EnumList:
		//	en_ents+=EnumEntry ("," en_ents+=EnumEntry)*;
		@Override public ParserRule getRule() { return rule; }

		//en_ents+=EnumEntry ("," en_ents+=EnumEntry)*
		public Group getGroup() { return cGroup; }

		//en_ents+=EnumEntry
		public Assignment getEn_entsAssignment_0() { return cEn_entsAssignment_0; }

		//EnumEntry
		public RuleCall getEn_entsEnumEntryParserRuleCall_0_0() { return cEn_entsEnumEntryParserRuleCall_0_0; }

		//("," en_ents+=EnumEntry)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//en_ents+=EnumEntry
		public Assignment getEn_entsAssignment_1_1() { return cEn_entsAssignment_1_1; }

		//EnumEntry
		public RuleCall getEn_entsEnumEntryParserRuleCall_1_1_0() { return cEn_entsEnumEntryParserRuleCall_1_1_0; }
	}

	public class EnumDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnum_decAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEnum_decENUMKeyword_0_0 = (Keyword)cEnum_decAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnum_listAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnum_listEnumListParserRuleCall_2_0 = (RuleCall)cEnum_listAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumDecl:
		//	enum_dec="ENUM" "(" enum_list=EnumList ")";
		@Override public ParserRule getRule() { return rule; }

		//enum_dec="ENUM" "(" enum_list=EnumList ")"
		public Group getGroup() { return cGroup; }

		//enum_dec="ENUM"
		public Assignment getEnum_decAssignment_0() { return cEnum_decAssignment_0; }

		//"ENUM"
		public Keyword getEnum_decENUMKeyword_0_0() { return cEnum_decENUMKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//enum_list=EnumList
		public Assignment getEnum_listAssignment_2() { return cEnum_listAssignment_2; }

		//EnumList
		public RuleCall getEnum_listEnumListParserRuleCall_2_0() { return cEnum_listEnumListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class InputSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameINPUTSKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputsInputValueParserRuleCall_1_0 = (RuleCall)cInputsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InputSection:
		//	name="INPUTS" inputs+=InputValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="INPUTS" inputs+=InputValue+ => "END"
		public Group getGroup() { return cGroup; }

		//name="INPUTS"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"INPUTS"
		public Keyword getNameINPUTSKeyword_0_0() { return cNameINPUTSKeyword_0_0; }

		//inputs+=InputValue+
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }

		//InputValue
		public RuleCall getInputsInputValueParserRuleCall_1_0() { return cInputsInputValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Bool:
		//	"BOOL" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"BOOL" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"BOOL"
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class IntVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IntVar:
		//	"INT" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"INT" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"INT"
		public Keyword getINTKeyword_0() { return cINTKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class StringVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StringVar:
		//	"STRING" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"STRING" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class DatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDATASETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Dataset:
		//	"DATASET" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"DATASET" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"DATASET"
		public Keyword getDATASETKeyword_0() { return cDATASETKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Group:
		//	"GROUP" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"GROUP" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"GROUP"
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class RealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Real");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Real:
		//	"REAL" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"REAL" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"REAL"
		public Keyword getREALKeyword_0() { return cREALKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class InputSimpleTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSimpleTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringVarParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRealParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//InputSimpleTypes:
		//	Bool | IntVar | EnumDecl | StringVar | Real;
		@Override public ParserRule getRule() { return rule; }

		//Bool | IntVar | EnumDecl | StringVar | Real
		public Alternatives getAlternatives() { return cAlternatives; }

		//Bool
		public RuleCall getBoolParserRuleCall_0() { return cBoolParserRuleCall_0; }

		//IntVar
		public RuleCall getIntVarParserRuleCall_1() { return cIntVarParserRuleCall_1; }

		//EnumDecl
		public RuleCall getEnumDeclParserRuleCall_2() { return cEnumDeclParserRuleCall_2; }

		//StringVar
		public RuleCall getStringVarParserRuleCall_3() { return cStringVarParserRuleCall_3; }

		//Real
		public RuleCall getRealParserRuleCall_4() { return cRealParserRuleCall_4; }
	}

	public class RecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Record");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRECORDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Record:
		//	"RECORD" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"RECORD" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"RECORD"
		public Keyword getRECORDKeyword_0() { return cRECORDKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class KelBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KelBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKELBASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//KelBase:
		//	"KELBASE" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"KELBASE" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"KELBASE"
		public Keyword getKELBASEKeyword_0() { return cKELBASEKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputSimpleTypesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDatasetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKelBaseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGroupParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Datatype:
		//	InputSimpleTypes | Record | Dataset | KelBase | Group;
		@Override public ParserRule getRule() { return rule; }

		//InputSimpleTypes | Record | Dataset | KelBase | Group
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputSimpleTypes
		public RuleCall getInputSimpleTypesParserRuleCall_0() { return cInputSimpleTypesParserRuleCall_0; }

		//Record
		public RuleCall getRecordParserRuleCall_1() { return cRecordParserRuleCall_1; }

		//Dataset
		public RuleCall getDatasetParserRuleCall_2() { return cDatasetParserRuleCall_2; }

		//KelBase
		public RuleCall getKelBaseParserRuleCall_3() { return cKelBaseParserRuleCall_3; }

		//Group
		public RuleCall getGroupParserRuleCall_4() { return cGroupParserRuleCall_4; }
	}

	public class InputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cInputSimpleTypesParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cRecordParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cDatasetParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final Assignment cInput_op_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInput_op_listInputOptionsParserRuleCall_0_1_0 = (RuleCall)cInput_op_listAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDatasetParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cInput_op_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInput_op_listInputOptionsParserRuleCall_1_1_0 = (RuleCall)cInput_op_listAssignment_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFieldsFieldDeclParserRuleCall_1_2_0 = (RuleCall)cFieldsAssignment_1_2.eContents().get(0);
		private final Keyword cENDKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cKelBaseParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cInput_op_listAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInput_op_listInputOptionsParserRuleCall_2_1_0 = (RuleCall)cInput_op_listAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cKel_opsAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cKel_opsKelEntityDeclParserRuleCall_2_2_0_0 = (RuleCall)cKel_opsAssignment_2_2_0.eContents().get(0);
		private final Assignment cKel_opsAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cKel_opsKelEntityDeclSimpleParserRuleCall_2_2_1_0 = (RuleCall)cKel_opsAssignment_2_2_1.eContents().get(0);
		private final Assignment cKel_opsAssignment_2_2_2 = (Assignment)cAlternatives_2_2.eContents().get(2);
		private final RuleCall cKel_opsKelAttrDeclParserRuleCall_2_2_2_0 = (RuleCall)cKel_opsAssignment_2_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cGroupParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cInput_op_listAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInput_op_listInputOptionsParserRuleCall_3_1_0 = (RuleCall)cInput_op_listAssignment_3_1.eContents().get(0);
		private final Assignment cValsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValsInputValueParserRuleCall_3_2_0 = (RuleCall)cValsAssignment_3_2.eContents().get(0);
		private final Keyword cENDKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//InputValue:
		//	(InputSimpleTypes | Record | Dataset) input_op_list=InputOptions? ";" | Dataset input_op_list=InputOptions?
		//	fields+=FieldDecl* => "END" | KelBase input_op_list=InputOptions? (kel_ops+=KelEntityDecl |
		//	kel_ops+=KelEntityDeclSimple | kel_ops+=KelAttrDecl)* | Group input_op_list=InputOptions? vals+=InputValue* => "END";
		@Override public ParserRule getRule() { return rule; }

		//(InputSimpleTypes | Record | Dataset) input_op_list=InputOptions? ";" | Dataset input_op_list=InputOptions?
		//fields+=FieldDecl* => "END" | KelBase input_op_list=InputOptions? (kel_ops+=KelEntityDecl |
		//kel_ops+=KelEntityDeclSimple | kel_ops+=KelAttrDecl)* | Group input_op_list=InputOptions? vals+=InputValue* => "END"
		public Alternatives getAlternatives() { return cAlternatives; }

		//(InputSimpleTypes | Record | Dataset) input_op_list=InputOptions? ";"
		public Group getGroup_0() { return cGroup_0; }

		//InputSimpleTypes | Record | Dataset
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//InputSimpleTypes
		public RuleCall getInputSimpleTypesParserRuleCall_0_0_0() { return cInputSimpleTypesParserRuleCall_0_0_0; }

		//Record
		public RuleCall getRecordParserRuleCall_0_0_1() { return cRecordParserRuleCall_0_0_1; }

		//Dataset
		public RuleCall getDatasetParserRuleCall_0_0_2() { return cDatasetParserRuleCall_0_0_2; }

		//input_op_list=InputOptions?
		public Assignment getInput_op_listAssignment_0_1() { return cInput_op_listAssignment_0_1; }

		//InputOptions
		public RuleCall getInput_op_listInputOptionsParserRuleCall_0_1_0() { return cInput_op_listInputOptionsParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//Dataset input_op_list=InputOptions? fields+=FieldDecl* => "END"
		public Group getGroup_1() { return cGroup_1; }

		//Dataset
		public RuleCall getDatasetParserRuleCall_1_0() { return cDatasetParserRuleCall_1_0; }

		//input_op_list=InputOptions?
		public Assignment getInput_op_listAssignment_1_1() { return cInput_op_listAssignment_1_1; }

		//InputOptions
		public RuleCall getInput_op_listInputOptionsParserRuleCall_1_1_0() { return cInput_op_listInputOptionsParserRuleCall_1_1_0; }

		//fields+=FieldDecl*
		public Assignment getFieldsAssignment_1_2() { return cFieldsAssignment_1_2; }

		//FieldDecl
		public RuleCall getFieldsFieldDeclParserRuleCall_1_2_0() { return cFieldsFieldDeclParserRuleCall_1_2_0; }

		//=> "END"
		public Keyword getENDKeyword_1_3() { return cENDKeyword_1_3; }

		//KelBase input_op_list=InputOptions? (kel_ops+=KelEntityDecl | kel_ops+=KelEntityDeclSimple | kel_ops+=KelAttrDecl)*
		public Group getGroup_2() { return cGroup_2; }

		//KelBase
		public RuleCall getKelBaseParserRuleCall_2_0() { return cKelBaseParserRuleCall_2_0; }

		//input_op_list=InputOptions?
		public Assignment getInput_op_listAssignment_2_1() { return cInput_op_listAssignment_2_1; }

		//InputOptions
		public RuleCall getInput_op_listInputOptionsParserRuleCall_2_1_0() { return cInput_op_listInputOptionsParserRuleCall_2_1_0; }

		//(kel_ops+=KelEntityDecl | kel_ops+=KelEntityDeclSimple | kel_ops+=KelAttrDecl)*
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//kel_ops+=KelEntityDecl
		public Assignment getKel_opsAssignment_2_2_0() { return cKel_opsAssignment_2_2_0; }

		//KelEntityDecl
		public RuleCall getKel_opsKelEntityDeclParserRuleCall_2_2_0_0() { return cKel_opsKelEntityDeclParserRuleCall_2_2_0_0; }

		//kel_ops+=KelEntityDeclSimple
		public Assignment getKel_opsAssignment_2_2_1() { return cKel_opsAssignment_2_2_1; }

		//KelEntityDeclSimple
		public RuleCall getKel_opsKelEntityDeclSimpleParserRuleCall_2_2_1_0() { return cKel_opsKelEntityDeclSimpleParserRuleCall_2_2_1_0; }

		//kel_ops+=KelAttrDecl
		public Assignment getKel_opsAssignment_2_2_2() { return cKel_opsAssignment_2_2_2; }

		//KelAttrDecl
		public RuleCall getKel_opsKelAttrDeclParserRuleCall_2_2_2_0() { return cKel_opsKelAttrDeclParserRuleCall_2_2_2_0; }

		//Group input_op_list=InputOptions? vals+=InputValue* => "END"
		public Group getGroup_3() { return cGroup_3; }

		//Group
		public RuleCall getGroupParserRuleCall_3_0() { return cGroupParserRuleCall_3_0; }

		//input_op_list=InputOptions?
		public Assignment getInput_op_listAssignment_3_1() { return cInput_op_listAssignment_3_1; }

		//InputOptions
		public RuleCall getInput_op_listInputOptionsParserRuleCall_3_1_0() { return cInput_op_listInputOptionsParserRuleCall_3_1_0; }

		//vals+=InputValue*
		public Assignment getValsAssignment_3_2() { return cValsAssignment_3_2; }

		//InputValue
		public RuleCall getValsInputValueParserRuleCall_3_2_0() { return cValsInputValueParserRuleCall_3_2_0; }

		//=> "END"
		public Keyword getENDKeyword_3_3() { return cENDKeyword_3_3; }
	}

	public class InputOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInput_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInput_opsInputOptionParserRuleCall_1_0 = (RuleCall)cInput_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInput_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInput_opsInputOptionParserRuleCall_2_1_0 = (RuleCall)cInput_opsAssignment_2_1.eContents().get(0);
		
		//InputOptions:
		//	":" input_ops+=InputOption ("," input_ops+=InputOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" input_ops+=InputOption ("," input_ops+=InputOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//input_ops+=InputOption
		public Assignment getInput_opsAssignment_1() { return cInput_opsAssignment_1; }

		//InputOption
		public RuleCall getInput_opsInputOptionParserRuleCall_1_0() { return cInput_opsInputOptionParserRuleCall_1_0; }

		//("," input_ops+=InputOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//input_ops+=InputOption
		public Assignment getInput_opsAssignment_2_1() { return cInput_opsAssignment_2_1; }

		//InputOption
		public RuleCall getInput_opsInputOptionParserRuleCall_2_1_0() { return cInput_opsInputOptionParserRuleCall_2_1_0; }
	}

	public class InputOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cAtrAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cAtrOPTIONALKeyword_0_0_0 = (Keyword)cAtrAssignment_0_0.eContents().get(0);
		private final Assignment cAtrAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cAtrDEFINEDKeyword_0_1_0 = (Keyword)cAtrAssignment_0_1.eContents().get(0);
		private final Assignment cAtrAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cAtrDISABLEDKeyword_0_2_0 = (Keyword)cAtrAssignment_0_2.eContents().get(0);
		private final Assignment cAtrAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final Keyword cAtrMAPBYTYPEKeyword_0_3_0 = (Keyword)cAtrAssignment_0_3.eContents().get(0);
		private final Assignment cAtrAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final Keyword cAtrMAPBYNAMEKeyword_0_4_0 = (Keyword)cAtrAssignment_0_4.eContents().get(0);
		private final Assignment cAtrAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final Keyword cAtrMANYKeyword_0_5_0 = (Keyword)cAtrAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFormAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cFormFORMFIELDKeyword_1_0_0 = (Keyword)cFormAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cForm_opAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cForm_opFormfieldOptionParserRuleCall_1_2_0 = (RuleCall)cForm_opAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cEnabAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cEnabENABLEKeyword_2_0_0 = (Keyword)cEnabAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAssigns_listAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAssigns_listAssignListParserRuleCall_2_2_0 = (RuleCall)cAssigns_listAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cTypeTYPEKeyword_3_0_0 = (Keyword)cTypeAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cType_opAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cType_opInputtypeOptionsParserRuleCall_3_2_0 = (RuleCall)cType_opAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final Keyword cAtrRANGEKeyword_4_0_0_0 = (Keyword)cAtrAssignment_4_0_0.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final Keyword cAtrDEFAULTKeyword_4_0_1_0 = (Keyword)cAtrAssignment_4_0_1.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_2 = (Assignment)cAlternatives_4_0.eContents().get(2);
		private final Keyword cAtrMAXLENGTHKeyword_4_0_2_0 = (Keyword)cAtrAssignment_4_0_2.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_3 = (Assignment)cAlternatives_4_0.eContents().get(3);
		private final Keyword cAtrDISABLEDKeyword_4_0_3_0 = (Keyword)cAtrAssignment_4_0_3.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_4 = (Assignment)cAlternatives_4_0.eContents().get(4);
		private final Keyword cAtrDESCRIPTIONKeyword_4_0_4_0 = (Keyword)cAtrAssignment_4_0_4.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_5 = (Assignment)cAlternatives_4_0.eContents().get(5);
		private final Keyword cAtrNULLKeyword_4_0_5_0 = (Keyword)cAtrAssignment_4_0_5.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_6 = (Assignment)cAlternatives_4_0.eContents().get(6);
		private final Keyword cAtrFIELDLENGTHKeyword_4_0_6_0 = (Keyword)cAtrAssignment_4_0_6.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_7 = (Assignment)cAlternatives_4_0.eContents().get(7);
		private final Keyword cAtrROWSKeyword_4_0_7_0 = (Keyword)cAtrAssignment_4_0_7.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_8 = (Assignment)cAlternatives_4_0.eContents().get(8);
		private final Keyword cAtrCOLSKeyword_4_0_8_0 = (Keyword)cAtrAssignment_4_0_8.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_9 = (Assignment)cAlternatives_4_0.eContents().get(9);
		private final Keyword cAtr_HTML_STYLECLASSKeyword_4_0_9_0 = (Keyword)cAtrAssignment_4_0_9.eContents().get(0);
		private final Assignment cAtrAssignment_4_0_10 = (Assignment)cAlternatives_4_0.eContents().get(10);
		private final Keyword cAtrLABELKeyword_4_0_10_0 = (Keyword)cAtrAssignment_4_0_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValsValueListParserRuleCall_4_2_0 = (RuleCall)cValsAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//InputOption:
		//	(atr="OPTIONAL" | atr="DEFINED" | atr="DISABLED" | atr="MAPBYTYPE" | atr="MAPBYNAME" | atr="MANY") | form="FORMFIELD"
		//	"(" form_op=FormfieldOption ")" | enab="ENABLE" "(" assigns_list=AssignList ")" | type="TYPE" "("
		//	type_op=InputtypeOptions ")" | (atr="RANGE" | atr="DEFAULT" | atr="MAXLENGTH" | atr="DISABLED" | atr="DESCRIPTION" |
		//	atr="NULL" | atr="FIELDLENGTH" | atr="ROWS" | atr="COLS" | atr="_HTML_STYLECLASS" | atr="LABEL") "(" vals+=ValueList
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//(atr="OPTIONAL" | atr="DEFINED" | atr="DISABLED" | atr="MAPBYTYPE" | atr="MAPBYNAME" | atr="MANY") | form="FORMFIELD"
		//"(" form_op=FormfieldOption ")" | enab="ENABLE" "(" assigns_list=AssignList ")" | type="TYPE" "("
		//type_op=InputtypeOptions ")" | (atr="RANGE" | atr="DEFAULT" | atr="MAXLENGTH" | atr="DISABLED" | atr="DESCRIPTION" |
		//atr="NULL" | atr="FIELDLENGTH" | atr="ROWS" | atr="COLS" | atr="_HTML_STYLECLASS" | atr="LABEL") "(" vals+=ValueList
		//")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//atr="OPTIONAL" | atr="DEFINED" | atr="DISABLED" | atr="MAPBYTYPE" | atr="MAPBYNAME" | atr="MANY"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//atr="OPTIONAL"
		public Assignment getAtrAssignment_0_0() { return cAtrAssignment_0_0; }

		//"OPTIONAL"
		public Keyword getAtrOPTIONALKeyword_0_0_0() { return cAtrOPTIONALKeyword_0_0_0; }

		//atr="DEFINED"
		public Assignment getAtrAssignment_0_1() { return cAtrAssignment_0_1; }

		//"DEFINED"
		public Keyword getAtrDEFINEDKeyword_0_1_0() { return cAtrDEFINEDKeyword_0_1_0; }

		//atr="DISABLED"
		public Assignment getAtrAssignment_0_2() { return cAtrAssignment_0_2; }

		//"DISABLED"
		public Keyword getAtrDISABLEDKeyword_0_2_0() { return cAtrDISABLEDKeyword_0_2_0; }

		//atr="MAPBYTYPE"
		public Assignment getAtrAssignment_0_3() { return cAtrAssignment_0_3; }

		//"MAPBYTYPE"
		public Keyword getAtrMAPBYTYPEKeyword_0_3_0() { return cAtrMAPBYTYPEKeyword_0_3_0; }

		//atr="MAPBYNAME"
		public Assignment getAtrAssignment_0_4() { return cAtrAssignment_0_4; }

		//"MAPBYNAME"
		public Keyword getAtrMAPBYNAMEKeyword_0_4_0() { return cAtrMAPBYNAMEKeyword_0_4_0; }

		//atr="MANY"
		public Assignment getAtrAssignment_0_5() { return cAtrAssignment_0_5; }

		//"MANY"
		public Keyword getAtrMANYKeyword_0_5_0() { return cAtrMANYKeyword_0_5_0; }

		//form="FORMFIELD" "(" form_op=FormfieldOption ")"
		public Group getGroup_1() { return cGroup_1; }

		//form="FORMFIELD"
		public Assignment getFormAssignment_1_0() { return cFormAssignment_1_0; }

		//"FORMFIELD"
		public Keyword getFormFORMFIELDKeyword_1_0_0() { return cFormFORMFIELDKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//form_op=FormfieldOption
		public Assignment getForm_opAssignment_1_2() { return cForm_opAssignment_1_2; }

		//FormfieldOption
		public RuleCall getForm_opFormfieldOptionParserRuleCall_1_2_0() { return cForm_opFormfieldOptionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//enab="ENABLE" "(" assigns_list=AssignList ")"
		public Group getGroup_2() { return cGroup_2; }

		//enab="ENABLE"
		public Assignment getEnabAssignment_2_0() { return cEnabAssignment_2_0; }

		//"ENABLE"
		public Keyword getEnabENABLEKeyword_2_0_0() { return cEnabENABLEKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//assigns_list=AssignList
		public Assignment getAssigns_listAssignment_2_2() { return cAssigns_listAssignment_2_2; }

		//AssignList
		public RuleCall getAssigns_listAssignListParserRuleCall_2_2_0() { return cAssigns_listAssignListParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//type="TYPE" "(" type_op=InputtypeOptions ")"
		public Group getGroup_3() { return cGroup_3; }

		//type="TYPE"
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//"TYPE"
		public Keyword getTypeTYPEKeyword_3_0_0() { return cTypeTYPEKeyword_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//type_op=InputtypeOptions
		public Assignment getType_opAssignment_3_2() { return cType_opAssignment_3_2; }

		//InputtypeOptions
		public RuleCall getType_opInputtypeOptionsParserRuleCall_3_2_0() { return cType_opInputtypeOptionsParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//(atr="RANGE" | atr="DEFAULT" | atr="MAXLENGTH" | atr="DISABLED" | atr="DESCRIPTION" | atr="NULL" | atr="FIELDLENGTH" |
		//atr="ROWS" | atr="COLS" | atr="_HTML_STYLECLASS" | atr="LABEL") "(" vals+=ValueList ")"
		public Group getGroup_4() { return cGroup_4; }

		//atr="RANGE" | atr="DEFAULT" | atr="MAXLENGTH" | atr="DISABLED" | atr="DESCRIPTION" | atr="NULL" | atr="FIELDLENGTH" |
		//atr="ROWS" | atr="COLS" | atr="_HTML_STYLECLASS" | atr="LABEL"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//atr="RANGE"
		public Assignment getAtrAssignment_4_0_0() { return cAtrAssignment_4_0_0; }

		//"RANGE"
		public Keyword getAtrRANGEKeyword_4_0_0_0() { return cAtrRANGEKeyword_4_0_0_0; }

		//atr="DEFAULT"
		public Assignment getAtrAssignment_4_0_1() { return cAtrAssignment_4_0_1; }

		//"DEFAULT"
		public Keyword getAtrDEFAULTKeyword_4_0_1_0() { return cAtrDEFAULTKeyword_4_0_1_0; }

		//atr="MAXLENGTH"
		public Assignment getAtrAssignment_4_0_2() { return cAtrAssignment_4_0_2; }

		//"MAXLENGTH"
		public Keyword getAtrMAXLENGTHKeyword_4_0_2_0() { return cAtrMAXLENGTHKeyword_4_0_2_0; }

		//atr="DISABLED"
		public Assignment getAtrAssignment_4_0_3() { return cAtrAssignment_4_0_3; }

		//"DISABLED"
		public Keyword getAtrDISABLEDKeyword_4_0_3_0() { return cAtrDISABLEDKeyword_4_0_3_0; }

		//atr="DESCRIPTION"
		public Assignment getAtrAssignment_4_0_4() { return cAtrAssignment_4_0_4; }

		//"DESCRIPTION"
		public Keyword getAtrDESCRIPTIONKeyword_4_0_4_0() { return cAtrDESCRIPTIONKeyword_4_0_4_0; }

		//atr="NULL"
		public Assignment getAtrAssignment_4_0_5() { return cAtrAssignment_4_0_5; }

		//"NULL"
		public Keyword getAtrNULLKeyword_4_0_5_0() { return cAtrNULLKeyword_4_0_5_0; }

		//atr="FIELDLENGTH"
		public Assignment getAtrAssignment_4_0_6() { return cAtrAssignment_4_0_6; }

		//"FIELDLENGTH"
		public Keyword getAtrFIELDLENGTHKeyword_4_0_6_0() { return cAtrFIELDLENGTHKeyword_4_0_6_0; }

		//atr="ROWS"
		public Assignment getAtrAssignment_4_0_7() { return cAtrAssignment_4_0_7; }

		//"ROWS"
		public Keyword getAtrROWSKeyword_4_0_7_0() { return cAtrROWSKeyword_4_0_7_0; }

		//atr="COLS"
		public Assignment getAtrAssignment_4_0_8() { return cAtrAssignment_4_0_8; }

		//"COLS"
		public Keyword getAtrCOLSKeyword_4_0_8_0() { return cAtrCOLSKeyword_4_0_8_0; }

		//atr="_HTML_STYLECLASS"
		public Assignment getAtrAssignment_4_0_9() { return cAtrAssignment_4_0_9; }

		//"_HTML_STYLECLASS"
		public Keyword getAtr_HTML_STYLECLASSKeyword_4_0_9_0() { return cAtr_HTML_STYLECLASSKeyword_4_0_9_0; }

		//atr="LABEL"
		public Assignment getAtrAssignment_4_0_10() { return cAtrAssignment_4_0_10; }

		//"LABEL"
		public Keyword getAtrLABELKeyword_4_0_10_0() { return cAtrLABELKeyword_4_0_10_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//vals+=ValueList
		public Assignment getValsAssignment_4_2() { return cValsAssignment_4_2; }

		//ValueList
		public RuleCall getValsValueListParserRuleCall_4_2_0() { return cValsValueListParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}

	public class FormfieldOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormfieldOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCHECKBOXKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRADIOKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSELECTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLESELECTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTEXTAREAKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHIDDENKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTEXTKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//FormfieldOption:
		//	"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT";
		@Override public ParserRule getRule() { return rule; }

		//"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CHECKBOX"
		public Keyword getCHECKBOXKeyword_0() { return cCHECKBOXKeyword_0; }

		//"RADIO"
		public Keyword getRADIOKeyword_1() { return cRADIOKeyword_1; }

		//"SELECT"
		public Keyword getSELECTKeyword_2() { return cSELECTKeyword_2; }

		//"MULTIPLESELECT"
		public Keyword getMULTIPLESELECTKeyword_3() { return cMULTIPLESELECTKeyword_3; }

		//"TEXTAREA"
		public Keyword getTEXTAREAKeyword_4() { return cTEXTAREAKeyword_4; }

		//"HIDDEN"
		public Keyword getHIDDENKeyword_5() { return cHIDDENKeyword_5; }

		//"TEXT"
		public Keyword getTEXTKeyword_6() { return cTEXTKeyword_6; }
	}

	public class InputtypeOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputtypeOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUNICODEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUNISTRKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDECIMALKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNUMERICKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cREALKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//InputtypeOption:
		//	"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL";
		@Override public ParserRule getRule() { return rule; }

		//"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//"UNICODE"
		public Keyword getUNICODEKeyword_1() { return cUNICODEKeyword_1; }

		//"UNISTR"
		public Keyword getUNISTRKeyword_2() { return cUNISTRKeyword_2; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_3() { return cINTEGERKeyword_3; }

		//"DECIMAL"
		public Keyword getDECIMALKeyword_4() { return cDECIMALKeyword_4; }

		//"NUMERIC"
		public Keyword getNUMERICKeyword_5() { return cNUMERICKeyword_5; }

		//"REAL"
		public Keyword getREALKeyword_6() { return cREALKeyword_6; }
	}

	public class InputtypeOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputtypeOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIn_type_opAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIn_type_opInputtypeOptionParserRuleCall_0_0 = (RuleCall)cIn_type_opAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIn_type_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIn_type_opInputtypeOptionParserRuleCall_1_1_0 = (RuleCall)cIn_type_opAssignment_1_1.eContents().get(0);
		
		//InputtypeOptions:
		//	in_type_op+=InputtypeOption ("," in_type_op+=InputtypeOption)*;
		@Override public ParserRule getRule() { return rule; }

		//in_type_op+=InputtypeOption ("," in_type_op+=InputtypeOption)*
		public Group getGroup() { return cGroup; }

		//in_type_op+=InputtypeOption
		public Assignment getIn_type_opAssignment_0() { return cIn_type_opAssignment_0; }

		//InputtypeOption
		public RuleCall getIn_type_opInputtypeOptionParserRuleCall_0_0() { return cIn_type_opInputtypeOptionParserRuleCall_0_0; }

		//("," in_type_op+=InputtypeOption)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//in_type_op+=InputtypeOption
		public Assignment getIn_type_opAssignment_1_1() { return cIn_type_opAssignment_1_1; }

		//InputtypeOption
		public RuleCall getIn_type_opInputtypeOptionParserRuleCall_1_1_0() { return cIn_type_opInputtypeOptionParserRuleCall_1_1_0; }
	}

	public class IntegrateSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegrateSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameINTEGRATEKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cOutputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputsOutputValueParserRuleCall_1_0 = (RuleCall)cOutputsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IntegrateSection:
		//	name="INTEGRATE" outputs+=OutputValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="INTEGRATE" outputs+=OutputValue+ => "END"
		public Group getGroup() { return cGroup; }

		//name="INTEGRATE"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"INTEGRATE"
		public Keyword getNameINTEGRATEKeyword_0_0() { return cNameINTEGRATEKeyword_0_0; }

		//outputs+=OutputValue+
		public Assignment getOutputsAssignment_1() { return cOutputsAssignment_1; }

		//OutputValue
		public RuleCall getOutputsOutputValueParserRuleCall_1_0() { return cOutputsOutputValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class OutputSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOUTPUTSKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cOutputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputsOutputValueParserRuleCall_1_0 = (RuleCall)cOutputsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OutputSection:
		//	name="OUTPUTS" outputs+=OutputValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="OUTPUTS" outputs+=OutputValue+ => "END"
		public Group getGroup() { return cGroup; }

		//name="OUTPUTS"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"OUTPUTS"
		public Keyword getNameOUTPUTSKeyword_0_0() { return cNameOUTPUTSKeyword_0_0; }

		//outputs+=OutputValue+
		public Assignment getOutputsAssignment_1() { return cOutputsAssignment_1; }

		//OutputValue
		public RuleCall getOutputsOutputValueParserRuleCall_1_0() { return cOutputsOutputValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class OutfieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutfieldDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFieldsFieldDeclParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		
		//OutfieldDecl:
		//	IntVar | Bool | StringVar | fields+=FieldDecl;
		@Override public ParserRule getRule() { return rule; }

		//IntVar | Bool | StringVar | fields+=FieldDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntVar
		public RuleCall getIntVarParserRuleCall_0() { return cIntVarParserRuleCall_0; }

		//Bool
		public RuleCall getBoolParserRuleCall_1() { return cBoolParserRuleCall_1; }

		//StringVar
		public RuleCall getStringVarParserRuleCall_2() { return cStringVarParserRuleCall_2; }

		//fields+=FieldDecl
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//FieldDecl
		public RuleCall getFieldsFieldDeclParserRuleCall_3_0() { return cFieldsFieldDeclParserRuleCall_3_0; }
	}

	public class ECLIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINTEGERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLInteger:
		//	"INTEGER" INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"INTEGER" INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_0() { return cINTEGERKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLUnsignedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLUnsigned");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNSIGNEDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLUnsigned:
		//	"UNSIGNED" INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"UNSIGNED" INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//"UNSIGNED"
		public Keyword getUNSIGNEDKeyword_0() { return cUNSIGNEDKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLString:
		//	"STRING" INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"STRING" INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLQstringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLQstring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLQstring:
		//	"QSTRING" INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"QSTRING" INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//"QSTRING"
		public Keyword getQSTRINGKeyword_0() { return cQSTRINGKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLVarstringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLVarstring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLVarstring:
		//	"VARSTRING" INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"VARSTRING" INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//"VARSTRING"
		public Keyword getVARSTRINGKeyword_0() { return cVARSTRINGKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLUnicodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLUnicode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNICODEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLUnicode:
		//	"UNICODE" INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"UNICODE" INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//"UNICODE"
		public Keyword getUNICODEKeyword_0() { return cUNICODEKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLVarunicodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLVarunicode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARUNICODEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLVarunicode:
		//	"VARUNICODE" INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"VARUNICODE" INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//"VARUNICODE"
		public Keyword getVARUNICODEKeyword_0() { return cVARUNICODEKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDATAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ECLData:
		//	"DATA" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"DATA" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"DATA"
		public Keyword getDATAKeyword_0() { return cDATAKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class ECLRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ECLReal:
		//	"REAL" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"REAL" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"REAL"
		public Keyword getREALKeyword_0() { return cREALKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class ECLBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ECLBoolean:
		//	"BOOL" name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//"BOOL" name=TOKEN
		public Group getGroup() { return cGroup; }

		//"BOOL"
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }
	}

	public class ECLNumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLNumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cECLNUMBEREDTYPETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLNumType:
		//	ECLNUMBEREDTYPE INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//ECLNUMBEREDTYPE INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//ECLNUMBEREDTYPE
		public RuleCall getECLNUMBEREDTYPETerminalRuleCall_0() { return cECLNUMBEREDTYPETerminalRuleCall_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLDecTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLDecType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cECLDECIMALTYPETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLDecType:
		//	ECLDECIMALTYPE INT? name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//ECLDECIMALTYPE INT? name=TOKEN
		public Group getGroup() { return cGroup; }

		//ECLDECIMALTYPE
		public RuleCall getECLDECIMALTYPETerminalRuleCall_0() { return cECLDECIMALTYPETerminalRuleCall_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }
	}

	public class ECLfieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLfieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cECLIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cECLQstringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cECLStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cECLRealParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cECLUnicodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cECLDataParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cECLVarstringParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cECLVarunicodeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cECLUnsignedParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cECLNumTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cECLDecTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cECLBooleanParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//ECLfieldType:
		//	ECLInteger | ECLQstring | ECLString | ECLReal | ECLUnicode | ECLData | ECLVarstring | ECLVarunicode | ECLUnsigned |
		//	ECLNumType | ECLDecType | ECLBoolean;
		@Override public ParserRule getRule() { return rule; }

		//ECLInteger | ECLQstring | ECLString | ECLReal | ECLUnicode | ECLData | ECLVarstring | ECLVarunicode | ECLUnsigned |
		//ECLNumType | ECLDecType | ECLBoolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//ECLInteger
		public RuleCall getECLIntegerParserRuleCall_0() { return cECLIntegerParserRuleCall_0; }

		//ECLQstring
		public RuleCall getECLQstringParserRuleCall_1() { return cECLQstringParserRuleCall_1; }

		//ECLString
		public RuleCall getECLStringParserRuleCall_2() { return cECLStringParserRuleCall_2; }

		//ECLReal
		public RuleCall getECLRealParserRuleCall_3() { return cECLRealParserRuleCall_3; }

		//ECLUnicode
		public RuleCall getECLUnicodeParserRuleCall_4() { return cECLUnicodeParserRuleCall_4; }

		//ECLData
		public RuleCall getECLDataParserRuleCall_5() { return cECLDataParserRuleCall_5; }

		//ECLVarstring
		public RuleCall getECLVarstringParserRuleCall_6() { return cECLVarstringParserRuleCall_6; }

		//ECLVarunicode
		public RuleCall getECLVarunicodeParserRuleCall_7() { return cECLVarunicodeParserRuleCall_7; }

		//ECLUnsigned
		public RuleCall getECLUnsignedParserRuleCall_8() { return cECLUnsignedParserRuleCall_8; }

		//ECLNumType
		public RuleCall getECLNumTypeParserRuleCall_9() { return cECLNumTypeParserRuleCall_9; }

		//ECLDecType
		public RuleCall getECLDecTypeParserRuleCall_10() { return cECLDecTypeParserRuleCall_10; }

		//ECLBoolean
		public RuleCall getECLBooleanParserRuleCall_11() { return cECLBooleanParserRuleCall_11; }
	}

	public class ECLOutputDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLOutputDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cECLfieldTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cOptionsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOptionsOutputOptionsParserRuleCall_0_1_0 = (RuleCall)cOptionsAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cNestedDatasetDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ECLOutputDecl:
		//	ECLfieldType options=OutputOptions? ";" | NestedDatasetDecl;
		@Override public ParserRule getRule() { return rule; }

		//ECLfieldType options=OutputOptions? ";" | NestedDatasetDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ECLfieldType options=OutputOptions? ";"
		public Group getGroup_0() { return cGroup_0; }

		//ECLfieldType
		public RuleCall getECLfieldTypeParserRuleCall_0_0() { return cECLfieldTypeParserRuleCall_0_0; }

		//options=OutputOptions?
		public Assignment getOptionsAssignment_0_1() { return cOptionsAssignment_0_1; }

		//OutputOptions
		public RuleCall getOptionsOutputOptionsParserRuleCall_0_1_0() { return cOptionsOutputOptionsParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//NestedDatasetDecl
		public RuleCall getNestedDatasetDeclParserRuleCall_1() { return cNestedDatasetDeclParserRuleCall_1; }
	}

	public class ServiceInputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceInputValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cECLfieldTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cIn_opsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIn_opsInputOptionsParserRuleCall_0_1_0 = (RuleCall)cIn_opsAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cNestedDatasetDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ServiceInputValue:
		//	ECLfieldType in_ops=InputOptions? ";" | NestedDatasetDecl;
		@Override public ParserRule getRule() { return rule; }

		//ECLfieldType in_ops=InputOptions? ";" | NestedDatasetDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ECLfieldType in_ops=InputOptions? ";"
		public Group getGroup_0() { return cGroup_0; }

		//ECLfieldType
		public RuleCall getECLfieldTypeParserRuleCall_0_0() { return cECLfieldTypeParserRuleCall_0_0; }

		//in_ops=InputOptions?
		public Assignment getIn_opsAssignment_0_1() { return cIn_opsAssignment_0_1; }

		//InputOptions
		public RuleCall getIn_opsInputOptionsParserRuleCall_0_1_0() { return cIn_opsInputOptionsParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//NestedDatasetDecl
		public RuleCall getNestedDatasetDeclParserRuleCall_1() { return cNestedDatasetDeclParserRuleCall_1; }
	}

	public class ServiceInputSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceInputSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINPUTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cServsServiceInputValueParserRuleCall_1_0 = (RuleCall)cServsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ServiceInputSection:
		//	"INPUTS" servs+=ServiceInputValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//"INPUTS" servs+=ServiceInputValue+ => "END"
		public Group getGroup() { return cGroup; }

		//"INPUTS"
		public Keyword getINPUTSKeyword_0() { return cINPUTSKeyword_0; }

		//servs+=ServiceInputValue+
		public Assignment getServsAssignment_1() { return cServsAssignment_1; }

		//ServiceInputValue
		public RuleCall getServsServiceInputValueParserRuleCall_1_0() { return cServsServiceInputValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class NestedDatasetDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedDatasetDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOutDatasetParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsOutputOptionsParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Assignment cDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclECLOutputDeclParserRuleCall_2_0 = (RuleCall)cDeclAssignment_2.eContents().get(0);
		private final Keyword cENDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NestedDatasetDecl:
		//	OutDataset options=OutputOptions? decl+=ECLOutputDecl+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//OutDataset options=OutputOptions? decl+=ECLOutputDecl+ => "END"
		public Group getGroup() { return cGroup; }

		//OutDataset
		public RuleCall getOutDatasetParserRuleCall_0() { return cOutDatasetParserRuleCall_0; }

		//options=OutputOptions?
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }

		//OutputOptions
		public RuleCall getOptionsOutputOptionsParserRuleCall_1_0() { return cOptionsOutputOptionsParserRuleCall_1_0; }

		//decl+=ECLOutputDecl+
		public Assignment getDeclAssignment_2() { return cDeclAssignment_2; }

		//ECLOutputDecl
		public RuleCall getDeclECLOutputDeclParserRuleCall_2_0() { return cDeclECLOutputDeclParserRuleCall_2_0; }

		//=> "END"
		public Keyword getENDKeyword_3() { return cENDKeyword_3; }
	}

	public class OutputOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeSIDEKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeLARGEKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeSMALLKeyword_0_0_2 = (Keyword)cTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cTypeFEWKeyword_0_0_3 = (Keyword)cTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cTypeWUIDKeyword_0_0_4 = (Keyword)cTypeAlternatives_0_0.eContents().get(4);
		private final Keyword cTypeAPPENDKeyword_0_0_5 = (Keyword)cTypeAlternatives_0_0.eContents().get(5);
		private final Keyword cTypeSCOREDSEARCHKeyword_0_0_6 = (Keyword)cTypeAlternatives_0_0.eContents().get(6);
		private final Keyword cTypeDATABOMBKeyword_0_0_7 = (Keyword)cTypeAlternatives_0_0.eContents().get(7);
		private final Keyword cTypeOPTIONALKeyword_0_0_8 = (Keyword)cTypeAlternatives_0_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAtrAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cAtrAlternatives_1_0_0 = (Alternatives)cAtrAssignment_1_0.eContents().get(0);
		private final Keyword cAtrWUIDKeyword_1_0_0_0 = (Keyword)cAtrAlternatives_1_0_0.eContents().get(0);
		private final Keyword cAtrFROMKeyword_1_0_0_1 = (Keyword)cAtrAlternatives_1_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cAtrAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cAtrENABLEKeyword_2_0_0 = (Keyword)cAtrAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAssignsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAssignsAssignListParserRuleCall_2_2_0 = (RuleCall)cAssignsAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cAtrAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cAtrPREFIXKeyword_3_0_0 = (Keyword)cAtrAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cNameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_3_2_0 = (RuleCall)cNameAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cAtrAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cAtrAlternatives_4_0_0 = (Alternatives)cAtrAssignment_4_0.eContents().get(0);
		private final Keyword cAtrWUIDKeyword_4_0_0_0 = (Keyword)cAtrAlternatives_4_0_0.eContents().get(0);
		private final Keyword cAtrFILLSKeyword_4_0_0_1 = (Keyword)cAtrAlternatives_4_0_0.eContents().get(1);
		private final Keyword cAtrSOAPKeyword_4_0_0_2 = (Keyword)cAtrAlternatives_4_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValsValueListParserRuleCall_4_2_0 = (RuleCall)cValsAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cAtrAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Alternatives cAtrAlternatives_5_0_0 = (Alternatives)cAtrAssignment_5_0.eContents().get(0);
		private final Keyword cAtrDESCRIPTIONKeyword_5_0_0_0 = (Keyword)cAtrAlternatives_5_0_0.eContents().get(0);
		private final Keyword cAtrSOAPKeyword_5_0_0_1 = (Keyword)cAtrAlternatives_5_0_0.eContents().get(1);
		private final Keyword cAtrJSONKeyword_5_0_0_2 = (Keyword)cAtrAlternatives_5_0_0.eContents().get(2);
		private final Keyword cAtrROXIEKeyword_5_0_0_3 = (Keyword)cAtrAlternatives_5_0_0.eContents().get(3);
		private final Keyword cAtrXPATHKeyword_5_0_0_4 = (Keyword)cAtrAlternatives_5_0_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_5_2_0 = (RuleCall)cValsAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//OutputOption:
		//	type=("SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID" | "APPEND" | "SCOREDSEARCH" | "DATABOMB" | "OPTIONAL") | atr=("WUID"
		//	| "FROM") "(" name=TOKEN ")" | atr="ENABLE" "(" assigns=AssignList ")" | atr="PREFIX" "(" name=TOKEN ")" | atr=("WUID"
		//	| "FILLS" | "SOAP") "(" vals=ValueList ")" | atr=("DESCRIPTION" | "SOAP" | "JSON" | "ROXIE" | "XPATH") "(" vals=Value
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//type=("SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID" | "APPEND" | "SCOREDSEARCH" | "DATABOMB" | "OPTIONAL") | atr=("WUID" |
		//"FROM") "(" name=TOKEN ")" | atr="ENABLE" "(" assigns=AssignList ")" | atr="PREFIX" "(" name=TOKEN ")" | atr=("WUID" |
		//"FILLS" | "SOAP") "(" vals=ValueList ")" | atr=("DESCRIPTION" | "SOAP" | "JSON" | "ROXIE" | "XPATH") "(" vals=Value ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=("SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID" | "APPEND" | "SCOREDSEARCH" | "DATABOMB" | "OPTIONAL")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID" | "APPEND" | "SCOREDSEARCH" | "DATABOMB" | "OPTIONAL"
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//"SIDE"
		public Keyword getTypeSIDEKeyword_0_0_0() { return cTypeSIDEKeyword_0_0_0; }

		//"LARGE"
		public Keyword getTypeLARGEKeyword_0_0_1() { return cTypeLARGEKeyword_0_0_1; }

		//"SMALL"
		public Keyword getTypeSMALLKeyword_0_0_2() { return cTypeSMALLKeyword_0_0_2; }

		//"FEW"
		public Keyword getTypeFEWKeyword_0_0_3() { return cTypeFEWKeyword_0_0_3; }

		//"WUID"
		public Keyword getTypeWUIDKeyword_0_0_4() { return cTypeWUIDKeyword_0_0_4; }

		//"APPEND"
		public Keyword getTypeAPPENDKeyword_0_0_5() { return cTypeAPPENDKeyword_0_0_5; }

		//"SCOREDSEARCH"
		public Keyword getTypeSCOREDSEARCHKeyword_0_0_6() { return cTypeSCOREDSEARCHKeyword_0_0_6; }

		//"DATABOMB"
		public Keyword getTypeDATABOMBKeyword_0_0_7() { return cTypeDATABOMBKeyword_0_0_7; }

		//"OPTIONAL"
		public Keyword getTypeOPTIONALKeyword_0_0_8() { return cTypeOPTIONALKeyword_0_0_8; }

		//atr=("WUID" | "FROM") "(" name=TOKEN ")"
		public Group getGroup_1() { return cGroup_1; }

		//atr=("WUID" | "FROM")
		public Assignment getAtrAssignment_1_0() { return cAtrAssignment_1_0; }

		//"WUID" | "FROM"
		public Alternatives getAtrAlternatives_1_0_0() { return cAtrAlternatives_1_0_0; }

		//"WUID"
		public Keyword getAtrWUIDKeyword_1_0_0_0() { return cAtrWUIDKeyword_1_0_0_0; }

		//"FROM"
		public Keyword getAtrFROMKeyword_1_0_0_1() { return cAtrFROMKeyword_1_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//name=TOKEN
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_2_0() { return cNameTOKENParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//atr="ENABLE" "(" assigns=AssignList ")"
		public Group getGroup_2() { return cGroup_2; }

		//atr="ENABLE"
		public Assignment getAtrAssignment_2_0() { return cAtrAssignment_2_0; }

		//"ENABLE"
		public Keyword getAtrENABLEKeyword_2_0_0() { return cAtrENABLEKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//assigns=AssignList
		public Assignment getAssignsAssignment_2_2() { return cAssignsAssignment_2_2; }

		//AssignList
		public RuleCall getAssignsAssignListParserRuleCall_2_2_0() { return cAssignsAssignListParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//atr="PREFIX" "(" name=TOKEN ")"
		public Group getGroup_3() { return cGroup_3; }

		//atr="PREFIX"
		public Assignment getAtrAssignment_3_0() { return cAtrAssignment_3_0; }

		//"PREFIX"
		public Keyword getAtrPREFIXKeyword_3_0_0() { return cAtrPREFIXKeyword_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//name=TOKEN
		public Assignment getNameAssignment_3_2() { return cNameAssignment_3_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_3_2_0() { return cNameTOKENParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//atr=("WUID" | "FILLS" | "SOAP") "(" vals=ValueList ")"
		public Group getGroup_4() { return cGroup_4; }

		//atr=("WUID" | "FILLS" | "SOAP")
		public Assignment getAtrAssignment_4_0() { return cAtrAssignment_4_0; }

		//"WUID" | "FILLS" | "SOAP"
		public Alternatives getAtrAlternatives_4_0_0() { return cAtrAlternatives_4_0_0; }

		//"WUID"
		public Keyword getAtrWUIDKeyword_4_0_0_0() { return cAtrWUIDKeyword_4_0_0_0; }

		//"FILLS"
		public Keyword getAtrFILLSKeyword_4_0_0_1() { return cAtrFILLSKeyword_4_0_0_1; }

		//"SOAP"
		public Keyword getAtrSOAPKeyword_4_0_0_2() { return cAtrSOAPKeyword_4_0_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//vals=ValueList
		public Assignment getValsAssignment_4_2() { return cValsAssignment_4_2; }

		//ValueList
		public RuleCall getValsValueListParserRuleCall_4_2_0() { return cValsValueListParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//atr=("DESCRIPTION" | "SOAP" | "JSON" | "ROXIE" | "XPATH") "(" vals=Value ")"
		public Group getGroup_5() { return cGroup_5; }

		//atr=("DESCRIPTION" | "SOAP" | "JSON" | "ROXIE" | "XPATH")
		public Assignment getAtrAssignment_5_0() { return cAtrAssignment_5_0; }

		//"DESCRIPTION" | "SOAP" | "JSON" | "ROXIE" | "XPATH"
		public Alternatives getAtrAlternatives_5_0_0() { return cAtrAlternatives_5_0_0; }

		//"DESCRIPTION"
		public Keyword getAtrDESCRIPTIONKeyword_5_0_0_0() { return cAtrDESCRIPTIONKeyword_5_0_0_0; }

		//"SOAP"
		public Keyword getAtrSOAPKeyword_5_0_0_1() { return cAtrSOAPKeyword_5_0_0_1; }

		//"JSON"
		public Keyword getAtrJSONKeyword_5_0_0_2() { return cAtrJSONKeyword_5_0_0_2; }

		//"ROXIE"
		public Keyword getAtrROXIEKeyword_5_0_0_3() { return cAtrROXIEKeyword_5_0_0_3; }

		//"XPATH"
		public Keyword getAtrXPATHKeyword_5_0_0_4() { return cAtrXPATHKeyword_5_0_0_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//vals=Value
		public Assignment getValsAssignment_5_2() { return cValsAssignment_5_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_5_2_0() { return cValsValueParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}

	public class OutputOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutput_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutput_opsOutputOptionParserRuleCall_1_0 = (RuleCall)cOutput_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOutput_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOutput_opsOutputOptionParserRuleCall_2_1_0 = (RuleCall)cOutput_opsAssignment_2_1.eContents().get(0);
		
		//OutputOptions:
		//	":" output_ops+=OutputOption ("," output_ops+=OutputOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" output_ops+=OutputOption ("," output_ops+=OutputOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//output_ops+=OutputOption
		public Assignment getOutput_opsAssignment_1() { return cOutput_opsAssignment_1; }

		//OutputOption
		public RuleCall getOutput_opsOutputOptionParserRuleCall_1_0() { return cOutput_opsOutputOptionParserRuleCall_1_0; }

		//("," output_ops+=OutputOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//output_ops+=OutputOption
		public Assignment getOutput_opsAssignment_2_1() { return cOutput_opsAssignment_2_1; }

		//OutputOption
		public RuleCall getOutput_opsOutputOptionParserRuleCall_2_1_0() { return cOutput_opsOutputOptionParserRuleCall_2_1_0; }
	}

	public class OutTypeSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutTypeSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeBOOLKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeINTKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeSTRINGKeyword_0_0_2 = (Keyword)cTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cTypeACTIONKeyword_0_0_3 = (Keyword)cTypeAlternatives_0_0.eContents().get(3);
		private final Assignment cValsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_1_0 = (RuleCall)cValsAssignment_1.eContents().get(0);
		
		//OutTypeSimple:
		//	type=("BOOL" | "INT" | "STRING" | "ACTION")? vals=Value;
		@Override public ParserRule getRule() { return rule; }

		//type=("BOOL" | "INT" | "STRING" | "ACTION")? vals=Value
		public Group getGroup() { return cGroup; }

		//type=("BOOL" | "INT" | "STRING" | "ACTION")?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"BOOL" | "INT" | "STRING" | "ACTION"
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//"BOOL"
		public Keyword getTypeBOOLKeyword_0_0_0() { return cTypeBOOLKeyword_0_0_0; }

		//"INT"
		public Keyword getTypeINTKeyword_0_0_1() { return cTypeINTKeyword_0_0_1; }

		//"STRING"
		public Keyword getTypeSTRINGKeyword_0_0_2() { return cTypeSTRINGKeyword_0_0_2; }

		//"ACTION"
		public Keyword getTypeACTIONKeyword_0_0_3() { return cTypeACTIONKeyword_0_0_3; }

		//vals=Value
		public Assignment getValsAssignment_1() { return cValsAssignment_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_1_0() { return cValsValueParserRuleCall_1_0; }
	}

	public class OutDatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutDataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDATASETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOut_baseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOut_baseOutputBaseParserRuleCall_2_0 = (RuleCall)cOut_baseAssignment_2.eContents().get(0);
		private final Assignment cOpsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpsOutputOptionsParserRuleCall_3_0 = (RuleCall)cOpsAssignment_3.eContents().get(0);
		
		//OutDataset:
		//	"DATASET" name=TOKEN out_base=OutputBase? ops=OutputOptions?;
		@Override public ParserRule getRule() { return rule; }

		//"DATASET" name=TOKEN out_base=OutputBase? ops=OutputOptions?
		public Group getGroup() { return cGroup; }

		//"DATASET"
		public Keyword getDATASETKeyword_0() { return cDATASETKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//out_base=OutputBase?
		public Assignment getOut_baseAssignment_2() { return cOut_baseAssignment_2; }

		//OutputBase
		public RuleCall getOut_baseOutputBaseParserRuleCall_2_0() { return cOut_baseOutputBaseParserRuleCall_2_0; }

		//ops=OutputOptions?
		public Assignment getOpsAssignment_3() { return cOpsAssignment_3; }

		//OutputOptions
		public RuleCall getOpsOutputOptionsParserRuleCall_3_0() { return cOpsOutputOptionsParserRuleCall_3_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSERVICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOpsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpsOutputOptionsParserRuleCall_2_0 = (RuleCall)cOpsAssignment_2.eContents().get(0);
		private final Assignment cServAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServServiceInputSectionParserRuleCall_3_0 = (RuleCall)cServAssignment_3.eContents().get(0);
		
		//Service:
		//	"SERVICE" name=TOKEN ops=OutputOptions serv=ServiceInputSection?;
		@Override public ParserRule getRule() { return rule; }

		//"SERVICE" name=TOKEN ops=OutputOptions serv=ServiceInputSection?
		public Group getGroup() { return cGroup; }

		//"SERVICE"
		public Keyword getSERVICEKeyword_0() { return cSERVICEKeyword_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//ops=OutputOptions
		public Assignment getOpsAssignment_2() { return cOpsAssignment_2; }

		//OutputOptions
		public RuleCall getOpsOutputOptionsParserRuleCall_2_0() { return cOpsOutputOptionsParserRuleCall_2_0; }

		//serv=ServiceInputSection?
		public Assignment getServAssignment_3() { return cServAssignment_3; }

		//ServiceInputSection
		public RuleCall getServServiceInputSectionParserRuleCall_3_0() { return cServServiceInputSectionParserRuleCall_3_0; }
	}

	public class OutputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOutTypeSimpleParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOutDatasetParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cEcl_varsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEcl_varsECLOutputDeclParserRuleCall_1_1_0 = (RuleCall)cEcl_varsAssignment_1_1.eContents().get(0);
		private final Keyword cENDKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cOutDatasetParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cServiceParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cEcl_varsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEcl_varsECLOutputDeclParserRuleCall_3_1_0 = (RuleCall)cEcl_varsAssignment_3_1.eContents().get(0);
		private final Keyword cENDKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cServiceParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//OutputValue:
		//	OutTypeSimple ";" | OutDataset ecl_vars+=ECLOutputDecl* => "END" | OutDataset ";" | Service ecl_vars+=ECLOutputDecl*
		//	=> "END" | Service ";";
		@Override public ParserRule getRule() { return rule; }

		//OutTypeSimple ";" | OutDataset ecl_vars+=ECLOutputDecl* => "END" | OutDataset ";" | Service ecl_vars+=ECLOutputDecl* =>
		//"END" | Service ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OutTypeSimple ";"
		public Group getGroup_0() { return cGroup_0; }

		//OutTypeSimple
		public RuleCall getOutTypeSimpleParserRuleCall_0_0() { return cOutTypeSimpleParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//OutDataset ecl_vars+=ECLOutputDecl* => "END"
		public Group getGroup_1() { return cGroup_1; }

		//OutDataset
		public RuleCall getOutDatasetParserRuleCall_1_0() { return cOutDatasetParserRuleCall_1_0; }

		//ecl_vars+=ECLOutputDecl*
		public Assignment getEcl_varsAssignment_1_1() { return cEcl_varsAssignment_1_1; }

		//ECLOutputDecl
		public RuleCall getEcl_varsECLOutputDeclParserRuleCall_1_1_0() { return cEcl_varsECLOutputDeclParserRuleCall_1_1_0; }

		//=> "END"
		public Keyword getENDKeyword_1_2() { return cENDKeyword_1_2; }

		//OutDataset ";"
		public Group getGroup_2() { return cGroup_2; }

		//OutDataset
		public RuleCall getOutDatasetParserRuleCall_2_0() { return cOutDatasetParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//Service ecl_vars+=ECLOutputDecl* => "END"
		public Group getGroup_3() { return cGroup_3; }

		//Service
		public RuleCall getServiceParserRuleCall_3_0() { return cServiceParserRuleCall_3_0; }

		//ecl_vars+=ECLOutputDecl*
		public Assignment getEcl_varsAssignment_3_1() { return cEcl_varsAssignment_3_1; }

		//ECLOutputDecl
		public RuleCall getEcl_varsECLOutputDeclParserRuleCall_3_1_0() { return cEcl_varsECLOutputDeclParserRuleCall_3_1_0; }

		//=> "END"
		public Keyword getENDKeyword_3_2() { return cENDKeyword_3_2; }

		//Service ";"
		public Group getGroup_4() { return cGroup_4; }

		//Service
		public RuleCall getServiceParserRuleCall_4_0() { return cServiceParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class OutputBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cBaseDatatypeCrossReference_1_0 = (CrossReference)cBaseAssignment_1.eContents().get(0);
		private final RuleCall cBaseDatatypeTOKENParserRuleCall_1_0_1 = (RuleCall)cBaseDatatypeCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OutputBase:
		//	"(" base=[Datatype|TOKEN] ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" base=[Datatype|TOKEN] ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//base=[Datatype|TOKEN]
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//[Datatype|TOKEN]
		public CrossReference getBaseDatatypeCrossReference_1_0() { return cBaseDatatypeCrossReference_1_0; }

		//TOKEN
		public RuleCall getBaseDatatypeTOKENParserRuleCall_1_0_1() { return cBaseDatatypeTOKENParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PermissionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Permissions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePERMISSIONSKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cPermsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPermsPermissionParserRuleCall_1_0 = (RuleCall)cPermsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Permissions:
		//	name="PERMISSIONS" perms+=Permission* => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="PERMISSIONS" perms+=Permission* => "END"
		public Group getGroup() { return cGroup; }

		//name="PERMISSIONS"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"PERMISSIONS"
		public Keyword getNamePERMISSIONSKeyword_0_0() { return cNamePERMISSIONSKeyword_0_0; }

		//perms+=Permission*
		public Assignment getPermsAssignment_1() { return cPermsAssignment_1; }

		//Permission
		public RuleCall getPermsPermissionParserRuleCall_1_0() { return cPermsPermissionParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class PermissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Permission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameVIEWKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNameEDITKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cNameRUNKeyword_0_2_0 = (Keyword)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cPUBLICKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cPRIVATEKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cCust_levsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cCust_levsCustomPermissionLevelParserRuleCall_2_2_0_0 = (RuleCall)cCust_levsAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cCust_levsAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cCust_levsCustomPermissionLevelParserRuleCall_2_2_1_1_0 = (RuleCall)cCust_levsAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Permission:
		//	(name="VIEW" | name="EDIT" | name="RUN") ":" ("PUBLIC" | "PRIVATE" | cust_levs+=CustomPermissionLevel (","
		//	cust_levs+=CustomPermissionLevel)?) ";";
		@Override public ParserRule getRule() { return rule; }

		//(name="VIEW" | name="EDIT" | name="RUN") ":" ("PUBLIC" | "PRIVATE" | cust_levs+=CustomPermissionLevel (","
		//cust_levs+=CustomPermissionLevel)?) ";"
		public Group getGroup() { return cGroup; }

		//name="VIEW" | name="EDIT" | name="RUN"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name="VIEW"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"VIEW"
		public Keyword getNameVIEWKeyword_0_0_0() { return cNameVIEWKeyword_0_0_0; }

		//name="EDIT"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"EDIT"
		public Keyword getNameEDITKeyword_0_1_0() { return cNameEDITKeyword_0_1_0; }

		//name="RUN"
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//"RUN"
		public Keyword getNameRUNKeyword_0_2_0() { return cNameRUNKeyword_0_2_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"PUBLIC" | "PRIVATE" | cust_levs+=CustomPermissionLevel ("," cust_levs+=CustomPermissionLevel)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"PUBLIC"
		public Keyword getPUBLICKeyword_2_0() { return cPUBLICKeyword_2_0; }

		//"PRIVATE"
		public Keyword getPRIVATEKeyword_2_1() { return cPRIVATEKeyword_2_1; }

		//cust_levs+=CustomPermissionLevel ("," cust_levs+=CustomPermissionLevel)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//cust_levs+=CustomPermissionLevel
		public Assignment getCust_levsAssignment_2_2_0() { return cCust_levsAssignment_2_2_0; }

		//CustomPermissionLevel
		public RuleCall getCust_levsCustomPermissionLevelParserRuleCall_2_2_0_0() { return cCust_levsCustomPermissionLevelParserRuleCall_2_2_0_0; }

		//("," cust_levs+=CustomPermissionLevel)?
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//","
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }

		//cust_levs+=CustomPermissionLevel
		public Assignment getCust_levsAssignment_2_2_1_1() { return cCust_levsAssignment_2_2_1_1; }

		//CustomPermissionLevel
		public RuleCall getCust_levsCustomPermissionLevelParserRuleCall_2_2_1_1_0() { return cCust_levsCustomPermissionLevelParserRuleCall_2_2_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class CustomPermissionLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomPermissionLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUSERKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cGROUPKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_2_0 = (RuleCall)cValsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_3_1_0 = (RuleCall)cValsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CustomPermissionLevel:
		//	("USER" | "GROUP") "(" vals+=Value ("," vals+=Value)* ")";
		@Override public ParserRule getRule() { return rule; }

		//("USER" | "GROUP") "(" vals+=Value ("," vals+=Value)* ")"
		public Group getGroup() { return cGroup; }

		//"USER" | "GROUP"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"USER"
		public Keyword getUSERKeyword_0_0() { return cUSERKeyword_0_0; }

		//"GROUP"
		public Keyword getGROUPKeyword_0_1() { return cGROUPKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//vals+=Value
		public Assignment getValsAssignment_2() { return cValsAssignment_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_2_0() { return cValsValueParserRuleCall_2_0; }

		//("," vals+=Value)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//vals+=Value
		public Assignment getValsAssignment_3_1() { return cValsAssignment_3_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_3_1_0() { return cValsValueParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class GenerateSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenerateSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGenerateBodyInlineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGenerateBodySaltParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGenerateBodyKelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GenerateSection:
		//	GenerateBodyInline | GenerateBodySalt | GenerateBodyKel;
		@Override public ParserRule getRule() { return rule; }

		//GenerateBodyInline | GenerateBodySalt | GenerateBodyKel
		public Alternatives getAlternatives() { return cAlternatives; }

		//GenerateBodyInline
		public RuleCall getGenerateBodyInlineParserRuleCall_0() { return cGenerateBodyInlineParserRuleCall_0; }

		//GenerateBodySalt
		public RuleCall getGenerateBodySaltParserRuleCall_1() { return cGenerateBodySaltParserRuleCall_1; }

		//GenerateBodyKel
		public RuleCall getGenerateBodyKelParserRuleCall_2() { return cGenerateBodyKelParserRuleCall_2; }
	}

	public class GenerateBodyInlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenerateBodyInline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGENERATESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final RuleCall cGEN_BLOCKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GenerateBodyInline:
		//	name="GENERATES" GEN_BLOCK;
		@Override public ParserRule getRule() { return rule; }

		//name="GENERATES" GEN_BLOCK
		public Group getGroup() { return cGroup; }

		//name="GENERATES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"GENERATES"
		public Keyword getNameGENERATESKeyword_0_0() { return cNameGENERATESKeyword_0_0; }

		//GEN_BLOCK
		public RuleCall getGEN_BLOCKTerminalRuleCall_1() { return cGEN_BLOCKTerminalRuleCall_1; }
	}

	public class GenerateBodySaltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenerateBodySalt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGENERATESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cSALTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTOKENParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cSCOREDSEARCHKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cPROFILEKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Keyword cENDGENERATESKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GenerateBodySalt:
		//	name="GENERATES" "SALT" "(" TOKEN ")" ":" ("SCOREDSEARCH" | "PROFILE") => "ENDGENERATES";
		@Override public ParserRule getRule() { return rule; }

		//name="GENERATES" "SALT" "(" TOKEN ")" ":" ("SCOREDSEARCH" | "PROFILE") => "ENDGENERATES"
		public Group getGroup() { return cGroup; }

		//name="GENERATES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"GENERATES"
		public Keyword getNameGENERATESKeyword_0_0() { return cNameGENERATESKeyword_0_0; }

		//"SALT"
		public Keyword getSALTKeyword_1() { return cSALTKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_3() { return cTOKENParserRuleCall_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//"SCOREDSEARCH" | "PROFILE"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"SCOREDSEARCH"
		public Keyword getSCOREDSEARCHKeyword_6_0() { return cSCOREDSEARCHKeyword_6_0; }

		//"PROFILE"
		public Keyword getPROFILEKeyword_6_1() { return cPROFILEKeyword_6_1; }

		//=> "ENDGENERATES"
		public Keyword getENDGENERATESKeyword_7() { return cENDGENERATESKeyword_7; }
	}

	public class GenerateBodyKelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenerateBodyKel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGENERATESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cKELKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTOKENParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cENDGENERATESKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GenerateBodyKel:
		//	name="GENERATES" "KEL" "(" TOKEN ")" => "ENDGENERATES";
		@Override public ParserRule getRule() { return rule; }

		//name="GENERATES" "KEL" "(" TOKEN ")" => "ENDGENERATES"
		public Group getGroup() { return cGroup; }

		//name="GENERATES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"GENERATES"
		public Keyword getNameGENERATESKeyword_0_0() { return cNameGENERATESKeyword_0_0; }

		//"KEL"
		public Keyword getKELKeyword_1() { return cKELKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_3() { return cTOKENParserRuleCall_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//=> "ENDGENERATES"
		public Keyword getENDGENERATESKeyword_5() { return cENDGENERATESKeyword_5; }
	}

	public class VisualSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSection_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSection_nameVISUALIZEKeyword_0_0 = (Keyword)cSection_nameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVis_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVis_opsVisualSectionOptionsParserRuleCall_2_0 = (RuleCall)cVis_opsAssignment_2.eContents().get(0);
		private final Assignment cVis_elementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVis_elementsVisualizationParserRuleCall_3_0 = (RuleCall)cVis_elementsAssignment_3.eContents().get(0);
		private final Keyword cENDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VisualSection:
		//	section_name="VISUALIZE" name=TOKEN vis_ops=VisualSectionOptions? vis_elements+=Visualization+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//section_name="VISUALIZE" name=TOKEN vis_ops=VisualSectionOptions? vis_elements+=Visualization+ => "END"
		public Group getGroup() { return cGroup; }

		//section_name="VISUALIZE"
		public Assignment getSection_nameAssignment_0() { return cSection_nameAssignment_0; }

		//"VISUALIZE"
		public Keyword getSection_nameVISUALIZEKeyword_0_0() { return cSection_nameVISUALIZEKeyword_0_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_0() { return cNameTOKENParserRuleCall_1_0; }

		//vis_ops=VisualSectionOptions?
		public Assignment getVis_opsAssignment_2() { return cVis_opsAssignment_2; }

		//VisualSectionOptions
		public RuleCall getVis_opsVisualSectionOptionsParserRuleCall_2_0() { return cVis_opsVisualSectionOptionsParserRuleCall_2_0; }

		//vis_elements+=Visualization+
		public Assignment getVis_elementsAssignment_3() { return cVis_elementsAssignment_3; }

		//Visualization
		public RuleCall getVis_elementsVisualizationParserRuleCall_3_0() { return cVis_elementsVisualizationParserRuleCall_3_0; }

		//=> "END"
		public Keyword getENDKeyword_4() { return cENDKeyword_4; }
	}

	public class VisNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameCHOROKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameLINEKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameTIMELINEKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNamePIEKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameBARKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameTABLEKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameGRAPHKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		private final Keyword cNameFORMKeyword_0_7 = (Keyword)cNameAlternatives_0.eContents().get(7);
		private final Keyword cNameGROUPKeyword_0_8 = (Keyword)cNameAlternatives_0.eContents().get(8);
		private final Keyword cNameSLIDERKeyword_0_9 = (Keyword)cNameAlternatives_0.eContents().get(9);
		
		//VisName:
		//	name=("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE" | "GRAPH" | "FORM" | "GROUP" | "SLIDER");
		@Override public ParserRule getRule() { return rule; }

		//name=("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE" | "GRAPH" | "FORM" | "GROUP" | "SLIDER")
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE" | "GRAPH" | "FORM" | "GROUP" | "SLIDER"
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//"CHORO"
		public Keyword getNameCHOROKeyword_0_0() { return cNameCHOROKeyword_0_0; }

		//"LINE"
		public Keyword getNameLINEKeyword_0_1() { return cNameLINEKeyword_0_1; }

		//"TIMELINE"
		public Keyword getNameTIMELINEKeyword_0_2() { return cNameTIMELINEKeyword_0_2; }

		//"PIE"
		public Keyword getNamePIEKeyword_0_3() { return cNamePIEKeyword_0_3; }

		//"BAR"
		public Keyword getNameBARKeyword_0_4() { return cNameBARKeyword_0_4; }

		//"TABLE"
		public Keyword getNameTABLEKeyword_0_5() { return cNameTABLEKeyword_0_5; }

		//"GRAPH"
		public Keyword getNameGRAPHKeyword_0_6() { return cNameGRAPHKeyword_0_6; }

		//"FORM"
		public Keyword getNameFORMKeyword_0_7() { return cNameFORMKeyword_0_7; }

		//"GROUP"
		public Keyword getNameGROUPKeyword_0_8() { return cNameGROUPKeyword_0_8; }

		//"SLIDER"
		public Keyword getNameSLIDERKeyword_0_9() { return cNameSLIDERKeyword_0_9; }
	}

	public class VisInputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisInputValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInputSimpleTypesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIn_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIn_opsInputOptionsParserRuleCall_1_0 = (RuleCall)cIn_opsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VisInputValue:
		//	InputSimpleTypes in_ops=InputOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//InputSimpleTypes in_ops=InputOptions? ";"
		public Group getGroup() { return cGroup; }

		//InputSimpleTypes
		public RuleCall getInputSimpleTypesParserRuleCall_0() { return cInputSimpleTypesParserRuleCall_0; }

		//in_ops=InputOptions?
		public Assignment getIn_opsAssignment_1() { return cIn_opsAssignment_1; }

		//InputOptions
		public RuleCall getIn_opsInputOptionsParserRuleCall_1_0() { return cIn_opsInputOptionsParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class VisBasisParensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisBasisParens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputVisBasisParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VisBasisParens:
		//	"(" input=VisBasis ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" input=VisBasis ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//input=VisBasis
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }

		//VisBasis
		public RuleCall getInputVisBasisParserRuleCall_1_0() { return cInputVisBasisParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class VisualizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Visualization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeVisNameParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cParensAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cParensVisBasisParensParserRuleCall_0_2_0 = (RuleCall)cParensAssignment_0_2.eContents().get(0);
		private final Assignment cVis_opAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cVis_opVisualOptionsParserRuleCall_0_3_0 = (RuleCall)cVis_opAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeVisNameParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cParensAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParensVisBasisParensParserRuleCall_1_2_0 = (RuleCall)cParensAssignment_1_2.eContents().get(0);
		private final Assignment cVis_opAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cVis_opVisualOptionsParserRuleCall_1_3_0 = (RuleCall)cVis_opAssignment_1_3.eContents().get(0);
		private final Assignment cInput_valAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cInput_valVisInputValueParserRuleCall_1_4_0 = (RuleCall)cInput_valAssignment_1_4.eContents().get(0);
		private final Keyword cENDKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Visualization:
		//	type=VisName name=TOKEN parens=VisBasisParens? vis_op=VisualOptions? ";" | type=VisName name=TOKEN
		//	parens=VisBasisParens? vis_op=VisualOptions? input_val+=VisInputValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//type=VisName name=TOKEN parens=VisBasisParens? vis_op=VisualOptions? ";" | type=VisName name=TOKEN
		//parens=VisBasisParens? vis_op=VisualOptions? input_val+=VisInputValue+ => "END"
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=VisName name=TOKEN parens=VisBasisParens? vis_op=VisualOptions? ";"
		public Group getGroup_0() { return cGroup_0; }

		//type=VisName
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//VisName
		public RuleCall getTypeVisNameParserRuleCall_0_0_0() { return cTypeVisNameParserRuleCall_0_0_0; }

		//name=TOKEN
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_0_1_0() { return cNameTOKENParserRuleCall_0_1_0; }

		//parens=VisBasisParens?
		public Assignment getParensAssignment_0_2() { return cParensAssignment_0_2; }

		//VisBasisParens
		public RuleCall getParensVisBasisParensParserRuleCall_0_2_0() { return cParensVisBasisParensParserRuleCall_0_2_0; }

		//vis_op=VisualOptions?
		public Assignment getVis_opAssignment_0_3() { return cVis_opAssignment_0_3; }

		//VisualOptions
		public RuleCall getVis_opVisualOptionsParserRuleCall_0_3_0() { return cVis_opVisualOptionsParserRuleCall_0_3_0; }

		//";"
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }

		//type=VisName name=TOKEN parens=VisBasisParens? vis_op=VisualOptions? input_val+=VisInputValue+ => "END"
		public Group getGroup_1() { return cGroup_1; }

		//type=VisName
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//VisName
		public RuleCall getTypeVisNameParserRuleCall_1_0_0() { return cTypeVisNameParserRuleCall_1_0_0; }

		//name=TOKEN
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_1_1_0() { return cNameTOKENParserRuleCall_1_1_0; }

		//parens=VisBasisParens?
		public Assignment getParensAssignment_1_2() { return cParensAssignment_1_2; }

		//VisBasisParens
		public RuleCall getParensVisBasisParensParserRuleCall_1_2_0() { return cParensVisBasisParensParserRuleCall_1_2_0; }

		//vis_op=VisualOptions?
		public Assignment getVis_opAssignment_1_3() { return cVis_opAssignment_1_3; }

		//VisualOptions
		public RuleCall getVis_opVisualOptionsParserRuleCall_1_3_0() { return cVis_opVisualOptionsParserRuleCall_1_3_0; }

		//input_val+=VisInputValue+
		public Assignment getInput_valAssignment_1_4() { return cInput_valAssignment_1_4; }

		//VisInputValue
		public RuleCall getInput_valVisInputValueParserRuleCall_1_4_0() { return cInput_valVisInputValueParserRuleCall_1_4_0; }

		//=> "END"
		public Keyword getENDKeyword_1_5() { return cENDKeyword_1_5; }
	}

	public class VisBasisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisBasis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBasisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBasisOutDatasetCrossReference_0_0 = (CrossReference)cBasisAssignment_0.eContents().get(0);
		private final RuleCall cBasisOutDatasetTOKENParserRuleCall_0_0_1 = (RuleCall)cBasisOutDatasetCrossReference_0_0.eContents().get(1);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterVisFilterParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		private final Assignment cQualsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualsVisBasisQualifiersParserRuleCall_2_0 = (RuleCall)cQualsAssignment_2.eContents().get(0);
		
		//VisBasis:
		//	basis=[OutDataset|TOKEN] filter=VisFilter? quals=VisBasisQualifiers?;
		@Override public ParserRule getRule() { return rule; }

		//basis=[OutDataset|TOKEN] filter=VisFilter? quals=VisBasisQualifiers?
		public Group getGroup() { return cGroup; }

		//basis=[OutDataset|TOKEN]
		public Assignment getBasisAssignment_0() { return cBasisAssignment_0; }

		//[OutDataset|TOKEN]
		public CrossReference getBasisOutDatasetCrossReference_0_0() { return cBasisOutDatasetCrossReference_0_0; }

		//TOKEN
		public RuleCall getBasisOutDatasetTOKENParserRuleCall_0_0_1() { return cBasisOutDatasetTOKENParserRuleCall_0_0_1; }

		//filter=VisFilter?
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//VisFilter
		public RuleCall getFilterVisFilterParserRuleCall_1_0() { return cFilterVisFilterParserRuleCall_1_0; }

		//quals=VisBasisQualifiers?
		public Assignment getQualsAssignment_2() { return cQualsAssignment_2; }

		//VisBasisQualifiers
		public RuleCall getQualsVisBasisQualifiersParserRuleCall_2_0() { return cQualsVisBasisQualifiersParserRuleCall_2_0; }
	}

	public class VisFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_1_0 = (RuleCall)cValsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VisFilter:
		//	"("+ vals+=Value+ ")";
		@Override public ParserRule getRule() { return rule; }

		//"("+ vals+=Value+ ")"
		public Group getGroup() { return cGroup; }

		//"("+
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//vals+=Value+
		public Assignment getValsAssignment_1() { return cValsAssignment_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_1_0() { return cValsValueParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class VisBasisQualifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisBasisQualifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFuncsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncsFunctionParserRuleCall_1_0 = (RuleCall)cFuncsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQfuncsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQfuncsQFunctionParserRuleCall_2_1_0 = (RuleCall)cQfuncsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VisBasisQualifiers:
		//	"{" funcs=Function ("," qfuncs+=QFunction)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" funcs=Function ("," qfuncs+=QFunction)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//funcs=Function
		public Assignment getFuncsAssignment_1() { return cFuncsAssignment_1; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_1_0() { return cFuncsFunctionParserRuleCall_1_0; }

		//("," qfuncs+=QFunction)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//qfuncs+=QFunction
		public Assignment getQfuncsAssignment_2_1() { return cQfuncsAssignment_2_1; }

		//QFunction
		public RuleCall getQfuncsQFunctionParserRuleCall_2_1_0() { return cQfuncsQFunctionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PosVizDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PosVizData");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cECLfieldTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PosVizData:
		//	ECLfieldType | FieldDecl;
		@Override public ParserRule getRule() { return rule; }

		//ECLfieldType | FieldDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ECLfieldType
		public RuleCall getECLfieldTypeParserRuleCall_0() { return cECLfieldTypeParserRuleCall_0; }

		//FieldDecl
		public RuleCall getFieldDeclParserRuleCall_1() { return cFieldDeclParserRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValsValueParserRuleCall_0_0 = (RuleCall)cValsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_1_1_0 = (RuleCall)cValsAssignment_1_1.eContents().get(0);
		private final RuleCall cAggFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAggFunctionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cCountFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cCountFunctionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cSCALEKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_6_2 = (Alternatives)cGroup_6.eContents().get(2);
		private final RuleCall cCountFunctionParserRuleCall_6_2_0 = (RuleCall)cAlternatives_6_2.eContents().get(0);
		private final RuleCall cAggFunctionParserRuleCall_6_2_1 = (RuleCall)cAlternatives_6_2.eContents().get(1);
		private final Keyword cCommaKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cTypeAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cTypeINTTerminalRuleCall_6_4_0 = (RuleCall)cTypeAssignment_6_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		
		//Function: / *vars=[PosVizData] |* / vals=Value | / *'-' vars=[PosVizData] |* / "-" vals=Value | AggFunction | "-"
		//	AggFunction | CountFunction | "-" CountFunction | "SCALE" "(" / *(vars=[PosVizData])|* / (CountFunction | AggFunction)
		//	"," type=INT ")";
		@Override public ParserRule getRule() { return rule; }

		/// *vars=[PosVizData] |* / vals=Value | / *'-' vars=[PosVizData] |* / "-" vals=Value | AggFunction | "-" AggFunction |
		//CountFunction | "-" CountFunction | "SCALE" "(" / *(vars=[PosVizData])|* / (CountFunction | AggFunction) "," type=INT ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		/// *vars=[PosVizData] |* / vals=Value
		public Assignment getValsAssignment_0() { return cValsAssignment_0; }

		//Value
		public RuleCall getValsValueParserRuleCall_0_0() { return cValsValueParserRuleCall_0_0; }

		/// *'-' vars=[PosVizData] |* / "-" vals=Value
		public Group getGroup_1() { return cGroup_1; }

		/// *'-' vars=[PosVizData] |* / "-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//vals=Value
		public Assignment getValsAssignment_1_1() { return cValsAssignment_1_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_1_1_0() { return cValsValueParserRuleCall_1_1_0; }

		//AggFunction
		public RuleCall getAggFunctionParserRuleCall_2() { return cAggFunctionParserRuleCall_2; }

		//"-" AggFunction
		public Group getGroup_3() { return cGroup_3; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }

		//AggFunction
		public RuleCall getAggFunctionParserRuleCall_3_1() { return cAggFunctionParserRuleCall_3_1; }

		//CountFunction
		public RuleCall getCountFunctionParserRuleCall_4() { return cCountFunctionParserRuleCall_4; }

		//"-" CountFunction
		public Group getGroup_5() { return cGroup_5; }

		//"-"
		public Keyword getHyphenMinusKeyword_5_0() { return cHyphenMinusKeyword_5_0; }

		//CountFunction
		public RuleCall getCountFunctionParserRuleCall_5_1() { return cCountFunctionParserRuleCall_5_1; }

		//"SCALE" "(" / *(vars=[PosVizData])|* / (CountFunction | AggFunction) "," type=INT ")"
		public Group getGroup_6() { return cGroup_6; }

		//"SCALE"
		public Keyword getSCALEKeyword_6_0() { return cSCALEKeyword_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		/// *(vars=[PosVizData])|* / CountFunction | AggFunction
		public Alternatives getAlternatives_6_2() { return cAlternatives_6_2; }

		/// *(vars=[PosVizData])|* / CountFunction
		public RuleCall getCountFunctionParserRuleCall_6_2_0() { return cCountFunctionParserRuleCall_6_2_0; }

		//AggFunction
		public RuleCall getAggFunctionParserRuleCall_6_2_1() { return cAggFunctionParserRuleCall_6_2_1; }

		//","
		public Keyword getCommaKeyword_6_3() { return cCommaKeyword_6_3; }

		//type=INT
		public Assignment getTypeAssignment_6_4() { return cTypeAssignment_6_4; }

		//INT
		public RuleCall getTypeINTTerminalRuleCall_6_4_0() { return cTypeINTTerminalRuleCall_6_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_5() { return cRightParenthesisKeyword_6_5; }
	}

	public class QFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestBasisQualifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QFunction:
		//	Function | NestBasisQualifier;
		@Override public ParserRule getRule() { return rule; }

		//Function | NestBasisQualifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }

		//NestBasisQualifier
		public RuleCall getNestBasisQualifierParserRuleCall_1() { return cNestBasisQualifierParserRuleCall_1; }
	}

	public class NestBasisQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestBasisQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOKENParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cVisBasisQualifiersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NestBasisQualifier:
		//	TOKEN VisBasisQualifiers;
		@Override public ParserRule getRule() { return rule; }

		//TOKEN VisBasisQualifiers
		public Group getGroup() { return cGroup; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_0() { return cTOKENParserRuleCall_0; }

		//VisBasisQualifiers
		public RuleCall getVisBasisQualifiersParserRuleCall_1() { return cVisBasisQualifiersParserRuleCall_1; }
	}

	public class CountFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CountFunction");
		private final Keyword cCOUNTKeyword = (Keyword)rule.eContents().get(1);
		
		//CountFunction:
		//	"COUNT";
		@Override public ParserRule getRule() { return rule; }

		//"COUNT"
		public Keyword getCOUNTKeyword() { return cCOUNTKeyword; }
	}

	public class AggFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSUMKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAVEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cMAXKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cMINKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTOKENParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AggFunction:
		//	("SUM" | "AVE" | "MAX" | "MIN") "(" TOKEN ")";
		@Override public ParserRule getRule() { return rule; }

		//("SUM" | "AVE" | "MAX" | "MIN") "(" TOKEN ")"
		public Group getGroup() { return cGroup; }

		//"SUM" | "AVE" | "MAX" | "MIN"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"SUM"
		public Keyword getSUMKeyword_0_0() { return cSUMKeyword_0_0; }

		//"AVE"
		public Keyword getAVEKeyword_0_1() { return cAVEKeyword_0_1; }

		//"MAX"
		public Keyword getMAXKeyword_0_2() { return cMAXKeyword_0_2; }

		//"MIN"
		public Keyword getMINKeyword_0_3() { return cMINKeyword_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_2() { return cTOKENParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class VisualSectionOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualSectionOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVis_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVis_opsVisualSectionOptionParserRuleCall_1_0 = (RuleCall)cVis_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVis_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVis_opsVisualSectionOptionParserRuleCall_2_1_0 = (RuleCall)cVis_opsAssignment_2_1.eContents().get(0);
		
		//VisualSectionOptions:
		//	":" vis_ops+=VisualSectionOption ("," vis_ops+=VisualSectionOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" vis_ops+=VisualSectionOption ("," vis_ops+=VisualSectionOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//vis_ops+=VisualSectionOption
		public Assignment getVis_opsAssignment_1() { return cVis_opsAssignment_1; }

		//VisualSectionOption
		public RuleCall getVis_opsVisualSectionOptionParserRuleCall_1_0() { return cVis_opsVisualSectionOptionParserRuleCall_1_0; }

		//("," vis_ops+=VisualSectionOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//vis_ops+=VisualSectionOption
		public Assignment getVis_opsAssignment_2_1() { return cVis_opsAssignment_2_1; }

		//VisualSectionOption
		public RuleCall getVis_opsVisualSectionOptionParserRuleCall_2_1_0() { return cVis_opsVisualSectionOptionParserRuleCall_2_1_0; }
	}

	public class VisualSectionOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualSectionOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cNameLABELKeyword_0_0_0_0 = (Keyword)cNameAssignment_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNameTITLEKeyword_0_0_1_0 = (Keyword)cNameAssignment_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_0_2_0 = (RuleCall)cValsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameENABLEKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAssignsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAssignsAssignListParserRuleCall_1_2_0 = (RuleCall)cAssignsAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cNameEXPLOREKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cNamePRIMARYKeyword_2_1_0 = (Keyword)cNameAssignment_2_1.eContents().get(0);
		
		//VisualSectionOption:
		//	(name="LABEL" | name="TITLE") "(" vals=Value ")" | name="ENABLE" "(" assigns=AssignList ")" | (name="EXPLORE" |
		//	name="PRIMARY");
		@Override public ParserRule getRule() { return rule; }

		//(name="LABEL" | name="TITLE") "(" vals=Value ")" | name="ENABLE" "(" assigns=AssignList ")" | (name="EXPLORE" |
		//name="PRIMARY")
		public Alternatives getAlternatives() { return cAlternatives; }

		//(name="LABEL" | name="TITLE") "(" vals=Value ")"
		public Group getGroup_0() { return cGroup_0; }

		//name="LABEL" | name="TITLE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//name="LABEL"
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }

		//"LABEL"
		public Keyword getNameLABELKeyword_0_0_0_0() { return cNameLABELKeyword_0_0_0_0; }

		//name="TITLE"
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//"TITLE"
		public Keyword getNameTITLEKeyword_0_0_1_0() { return cNameTITLEKeyword_0_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//vals=Value
		public Assignment getValsAssignment_0_2() { return cValsAssignment_0_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_0_2_0() { return cValsValueParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//name="ENABLE" "(" assigns=AssignList ")"
		public Group getGroup_1() { return cGroup_1; }

		//name="ENABLE"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"ENABLE"
		public Keyword getNameENABLEKeyword_1_0_0() { return cNameENABLEKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//assigns=AssignList
		public Assignment getAssignsAssignment_1_2() { return cAssignsAssignment_1_2; }

		//AssignList
		public RuleCall getAssignsAssignListParserRuleCall_1_2_0() { return cAssignsAssignListParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//name="EXPLORE" | name="PRIMARY"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name="EXPLORE"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"EXPLORE"
		public Keyword getNameEXPLOREKeyword_2_0_0() { return cNameEXPLOREKeyword_2_0_0; }

		//name="PRIMARY"
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//"PRIMARY"
		public Keyword getNamePRIMARYKeyword_2_1_0() { return cNamePRIMARYKeyword_2_1_0; }
	}

	public class VizAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VizAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVal_lAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVal_lValueParserRuleCall_0_0 = (RuleCall)cVal_lAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVal_rAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVal_rValueListParserRuleCall_2_0 = (RuleCall)cVal_rAssignment_2.eContents().get(0);
		
		//VizAssign:
		//	val_l=Value "=" val_r=ValueList;
		@Override public ParserRule getRule() { return rule; }

		//val_l=Value "=" val_r=ValueList
		public Group getGroup() { return cGroup; }

		//val_l=Value
		public Assignment getVal_lAssignment_0() { return cVal_lAssignment_0; }

		//Value
		public RuleCall getVal_lValueParserRuleCall_0_0() { return cVal_lValueParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//val_r=ValueList
		public Assignment getVal_rAssignment_2() { return cVal_rAssignment_2; }

		//ValueList
		public RuleCall getVal_rValueListParserRuleCall_2_0() { return cVal_rValueListParserRuleCall_2_0; }
	}

	public class VizAssignListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VizAssignList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignsVizAssignParserRuleCall_0_0 = (RuleCall)cAssignsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignsVizAssignParserRuleCall_1_1_0 = (RuleCall)cAssignsAssignment_1_1.eContents().get(0);
		
		//VizAssignList:
		//	assigns+=VizAssign ("," assigns+=VizAssign)*;
		@Override public ParserRule getRule() { return rule; }

		//assigns+=VizAssign ("," assigns+=VizAssign)*
		public Group getGroup() { return cGroup; }

		//assigns+=VizAssign
		public Assignment getAssignsAssignment_0() { return cAssignsAssignment_0; }

		//VizAssign
		public RuleCall getAssignsVizAssignParserRuleCall_0_0() { return cAssignsVizAssignParserRuleCall_0_0; }

		//("," assigns+=VizAssign)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//assigns+=VizAssign
		public Assignment getAssignsAssignment_1_1() { return cAssignsAssignment_1_1; }

		//VizAssign
		public RuleCall getAssignsVizAssignParserRuleCall_1_1_0() { return cAssignsVizAssignParserRuleCall_1_1_0; }
	}

	public class VizEnumDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VizEnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameENUMKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignsVizAssignListParserRuleCall_2_0 = (RuleCall)cAssignsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VizEnumDecl:
		//	name="ENUM" "(" assigns=VizAssignList ")";
		@Override public ParserRule getRule() { return rule; }

		//name="ENUM" "(" assigns=VizAssignList ")"
		public Group getGroup() { return cGroup; }

		//name="ENUM"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"ENUM"
		public Keyword getNameENUMKeyword_0_0() { return cNameENUMKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//assigns=VizAssignList
		public Assignment getAssignsAssignment_2() { return cAssignsAssignment_2; }

		//VizAssignList
		public RuleCall getAssignsVizAssignListParserRuleCall_2_0() { return cAssignsVizAssignListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class VisualOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVis_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVis_opsVisualOptionParserRuleCall_1_0 = (RuleCall)cVis_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVis_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVis_opsVisualOptionParserRuleCall_2_1_0 = (RuleCall)cVis_opsAssignment_2_1.eContents().get(0);
		
		//VisualOptions:
		//	":" vis_ops+=VisualOption ("," vis_ops+=VisualOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" vis_ops+=VisualOption ("," vis_ops+=VisualOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//vis_ops+=VisualOption
		public Assignment getVis_opsAssignment_1() { return cVis_opsAssignment_1; }

		//VisualOption
		public RuleCall getVis_opsVisualOptionParserRuleCall_1_0() { return cVis_opsVisualOptionParserRuleCall_1_0; }

		//("," vis_ops+=VisualOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//vis_ops+=VisualOption
		public Assignment getVis_opsAssignment_2_1() { return cVis_opsAssignment_2_1; }

		//VisualOption
		public RuleCall getVis_opsVisualOptionParserRuleCall_2_1_0() { return cVis_opsVisualOptionParserRuleCall_2_1_0; }
	}

	public class VisualOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cNameTITLEKeyword_0_0_0_0 = (Keyword)cNameAssignment_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNameDATEKeyword_0_0_1_0 = (Keyword)cNameAssignment_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final Keyword cNameDESCRIPTIONKeyword_0_0_2_0 = (Keyword)cNameAssignment_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_0_3 = (Assignment)cAlternatives_0_0.eContents().get(3);
		private final Keyword cNamePICTUREKeyword_0_0_3_0 = (Keyword)cNameAssignment_0_0_3.eContents().get(0);
		private final Assignment cNameAssignment_0_0_4 = (Assignment)cAlternatives_0_0.eContents().get(4);
		private final Keyword cNameSTATEKeyword_0_0_4_0 = (Keyword)cNameAssignment_0_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_0_5 = (Assignment)cAlternatives_0_0.eContents().get(5);
		private final Keyword cNameCOUNTYKeyword_0_0_5_0 = (Keyword)cNameAssignment_0_0_5.eContents().get(0);
		private final Assignment cNameAssignment_0_0_6 = (Assignment)cAlternatives_0_0.eContents().get(6);
		private final Keyword cNameFIRSTKeyword_0_0_6_0 = (Keyword)cNameAssignment_0_0_6.eContents().get(0);
		private final Assignment cNameAssignment_0_0_7 = (Assignment)cAlternatives_0_0.eContents().get(7);
		private final Keyword cNameWEIGHTKeyword_0_0_7_0 = (Keyword)cNameAssignment_0_0_7.eContents().get(0);
		private final Assignment cNameAssignment_0_0_8 = (Assignment)cAlternatives_0_0.eContents().get(8);
		private final Keyword cNameSIZEKeyword_0_0_8_0 = (Keyword)cNameAssignment_0_0_8.eContents().get(0);
		private final Assignment cNameAssignment_0_0_9 = (Assignment)cAlternatives_0_0.eContents().get(9);
		private final Keyword cNameLEVELSKeyword_0_0_9_0 = (Keyword)cNameAssignment_0_0_9.eContents().get(0);
		private final Assignment cNameAssignment_0_0_10 = (Assignment)cAlternatives_0_0.eContents().get(10);
		private final Keyword cNameLEVELKeyword_0_0_10_0 = (Keyword)cNameAssignment_0_0_10.eContents().get(0);
		private final Assignment cNameAssignment_0_0_11 = (Assignment)cAlternatives_0_0.eContents().get(11);
		private final Keyword cNameUIDKeyword_0_0_11_0 = (Keyword)cNameAssignment_0_0_11.eContents().get(0);
		private final Assignment cNameAssignment_0_0_12 = (Assignment)cAlternatives_0_0.eContents().get(12);
		private final Keyword cNameTYPEKeyword_0_0_12_0 = (Keyword)cNameAssignment_0_0_12.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFuncsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFuncsFunctionParserRuleCall_0_2_0 = (RuleCall)cFuncsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cNameICONKeyword_1_0_0_0 = (Keyword)cNameAssignment_1_0_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cNameFLAGKeyword_1_0_1_0 = (Keyword)cNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cNameTYPEKeyword_1_0_2_0 = (Keyword)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFuncsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFuncsFunctionParserRuleCall_1_2_0 = (RuleCall)cFuncsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cDeclAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cDeclVizEnumDeclParserRuleCall_1_3_1_0 = (RuleCall)cDeclAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cVis_custAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVis_custVisualCustomOptionParserRuleCall_2_0 = (RuleCall)cVis_custAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNameCOLLAPSEKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cNameVISIBILITYKeyword_4_0_0 = (Keyword)cNameAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cVisibility_opAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cVisibility_opVisibilityOptionParserRuleCall_4_2_0 = (RuleCall)cVisibility_opAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cNameENABLEKeyword_5_0_0 = (Keyword)cNameAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAssignsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAssignsAssignListParserRuleCall_5_2_0 = (RuleCall)cAssignsAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cVisualCustomOptionParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFuncsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFuncsFunctionParserRuleCall_6_2_0 = (RuleCall)cFuncsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cFuncsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cFuncsFunctionParserRuleCall_6_3_1_0 = (RuleCall)cFuncsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cVisualMultivalParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFuncsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFuncsFunctionParserRuleCall_7_2_0 = (RuleCall)cFuncsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cFuncsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cFuncsFunctionParserRuleCall_7_3_1_0 = (RuleCall)cFuncsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final RuleCall cSelectOptionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLinkOptionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//VisualOption:
		//	(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="FIRST" |
		//	name="WEIGHT" | name="SIZE" | name="LEVELS" | name="LEVEL" | name="UID" | name="TYPE") "(" funcs+=Function ")" |
		//	(name="ICON" | name="FLAG" | name="TYPE") "(" funcs+=Function ("," decl=VizEnumDecl)? ")" |
		//	vis_cust=VisualCustomOption | name="COLLAPSE" | name="VISIBILITY" "(" visibility_op=VisibilityOption ")" |
		//	name="ENABLE" "(" assigns+=AssignList ")" | VisualCustomOption "(" funcs+=Function ("," funcs+=Function)* ")" |
		//	VisualMultival "(" funcs+=Function ("," funcs+=Function)* ")" | SelectOption | LinkOption;
		@Override public ParserRule getRule() { return rule; }

		//(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="FIRST" |
		//name="WEIGHT" | name="SIZE" | name="LEVELS" | name="LEVEL" | name="UID" | name="TYPE") "(" funcs+=Function ")" |
		//(name="ICON" | name="FLAG" | name="TYPE") "(" funcs+=Function ("," decl=VizEnumDecl)? ")" | vis_cust=VisualCustomOption
		//| name="COLLAPSE" | name="VISIBILITY" "(" visibility_op=VisibilityOption ")" | name="ENABLE" "(" assigns+=AssignList
		//")" | VisualCustomOption "(" funcs+=Function ("," funcs+=Function)* ")" | VisualMultival "(" funcs+=Function (","
		//funcs+=Function)* ")" | SelectOption | LinkOption
		public Alternatives getAlternatives() { return cAlternatives; }

		//(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="FIRST" |
		//name="WEIGHT" | name="SIZE" | name="LEVELS" | name="LEVEL" | name="UID" | name="TYPE") "(" funcs+=Function ")"
		public Group getGroup_0() { return cGroup_0; }

		//name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="FIRST" |
		//name="WEIGHT" | name="SIZE" | name="LEVELS" | name="LEVEL" | name="UID" | name="TYPE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//name="TITLE"
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }

		//"TITLE"
		public Keyword getNameTITLEKeyword_0_0_0_0() { return cNameTITLEKeyword_0_0_0_0; }

		//name="DATE"
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//"DATE"
		public Keyword getNameDATEKeyword_0_0_1_0() { return cNameDATEKeyword_0_0_1_0; }

		//name="DESCRIPTION"
		public Assignment getNameAssignment_0_0_2() { return cNameAssignment_0_0_2; }

		//"DESCRIPTION"
		public Keyword getNameDESCRIPTIONKeyword_0_0_2_0() { return cNameDESCRIPTIONKeyword_0_0_2_0; }

		//name="PICTURE"
		public Assignment getNameAssignment_0_0_3() { return cNameAssignment_0_0_3; }

		//"PICTURE"
		public Keyword getNamePICTUREKeyword_0_0_3_0() { return cNamePICTUREKeyword_0_0_3_0; }

		//name="STATE"
		public Assignment getNameAssignment_0_0_4() { return cNameAssignment_0_0_4; }

		//"STATE"
		public Keyword getNameSTATEKeyword_0_0_4_0() { return cNameSTATEKeyword_0_0_4_0; }

		//name="COUNTY"
		public Assignment getNameAssignment_0_0_5() { return cNameAssignment_0_0_5; }

		//"COUNTY"
		public Keyword getNameCOUNTYKeyword_0_0_5_0() { return cNameCOUNTYKeyword_0_0_5_0; }

		//name="FIRST"
		public Assignment getNameAssignment_0_0_6() { return cNameAssignment_0_0_6; }

		//"FIRST"
		public Keyword getNameFIRSTKeyword_0_0_6_0() { return cNameFIRSTKeyword_0_0_6_0; }

		//name="WEIGHT"
		public Assignment getNameAssignment_0_0_7() { return cNameAssignment_0_0_7; }

		//"WEIGHT"
		public Keyword getNameWEIGHTKeyword_0_0_7_0() { return cNameWEIGHTKeyword_0_0_7_0; }

		//name="SIZE"
		public Assignment getNameAssignment_0_0_8() { return cNameAssignment_0_0_8; }

		//"SIZE"
		public Keyword getNameSIZEKeyword_0_0_8_0() { return cNameSIZEKeyword_0_0_8_0; }

		//name="LEVELS"
		public Assignment getNameAssignment_0_0_9() { return cNameAssignment_0_0_9; }

		//"LEVELS"
		public Keyword getNameLEVELSKeyword_0_0_9_0() { return cNameLEVELSKeyword_0_0_9_0; }

		//name="LEVEL"
		public Assignment getNameAssignment_0_0_10() { return cNameAssignment_0_0_10; }

		//"LEVEL"
		public Keyword getNameLEVELKeyword_0_0_10_0() { return cNameLEVELKeyword_0_0_10_0; }

		//name="UID"
		public Assignment getNameAssignment_0_0_11() { return cNameAssignment_0_0_11; }

		//"UID"
		public Keyword getNameUIDKeyword_0_0_11_0() { return cNameUIDKeyword_0_0_11_0; }

		//name="TYPE"
		public Assignment getNameAssignment_0_0_12() { return cNameAssignment_0_0_12; }

		//"TYPE"
		public Keyword getNameTYPEKeyword_0_0_12_0() { return cNameTYPEKeyword_0_0_12_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//funcs+=Function
		public Assignment getFuncsAssignment_0_2() { return cFuncsAssignment_0_2; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_0_2_0() { return cFuncsFunctionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//(name="ICON" | name="FLAG" | name="TYPE") "(" funcs+=Function ("," decl=VizEnumDecl)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//name="ICON" | name="FLAG" | name="TYPE"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//name="ICON"
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }

		//"ICON"
		public Keyword getNameICONKeyword_1_0_0_0() { return cNameICONKeyword_1_0_0_0; }

		//name="FLAG"
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }

		//"FLAG"
		public Keyword getNameFLAGKeyword_1_0_1_0() { return cNameFLAGKeyword_1_0_1_0; }

		//name="TYPE"
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//"TYPE"
		public Keyword getNameTYPEKeyword_1_0_2_0() { return cNameTYPEKeyword_1_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//funcs+=Function
		public Assignment getFuncsAssignment_1_2() { return cFuncsAssignment_1_2; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_1_2_0() { return cFuncsFunctionParserRuleCall_1_2_0; }

		//("," decl=VizEnumDecl)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//decl=VizEnumDecl
		public Assignment getDeclAssignment_1_3_1() { return cDeclAssignment_1_3_1; }

		//VizEnumDecl
		public RuleCall getDeclVizEnumDeclParserRuleCall_1_3_1_0() { return cDeclVizEnumDeclParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//vis_cust=VisualCustomOption
		public Assignment getVis_custAssignment_2() { return cVis_custAssignment_2; }

		//VisualCustomOption
		public RuleCall getVis_custVisualCustomOptionParserRuleCall_2_0() { return cVis_custVisualCustomOptionParserRuleCall_2_0; }

		//name="COLLAPSE"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"COLLAPSE"
		public Keyword getNameCOLLAPSEKeyword_3_0() { return cNameCOLLAPSEKeyword_3_0; }

		//name="VISIBILITY" "(" visibility_op=VisibilityOption ")"
		public Group getGroup_4() { return cGroup_4; }

		//name="VISIBILITY"
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//"VISIBILITY"
		public Keyword getNameVISIBILITYKeyword_4_0_0() { return cNameVISIBILITYKeyword_4_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//visibility_op=VisibilityOption
		public Assignment getVisibility_opAssignment_4_2() { return cVisibility_opAssignment_4_2; }

		//VisibilityOption
		public RuleCall getVisibility_opVisibilityOptionParserRuleCall_4_2_0() { return cVisibility_opVisibilityOptionParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//name="ENABLE" "(" assigns+=AssignList ")"
		public Group getGroup_5() { return cGroup_5; }

		//name="ENABLE"
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }

		//"ENABLE"
		public Keyword getNameENABLEKeyword_5_0_0() { return cNameENABLEKeyword_5_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//assigns+=AssignList
		public Assignment getAssignsAssignment_5_2() { return cAssignsAssignment_5_2; }

		//AssignList
		public RuleCall getAssignsAssignListParserRuleCall_5_2_0() { return cAssignsAssignListParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//VisualCustomOption "(" funcs+=Function ("," funcs+=Function)* ")"
		public Group getGroup_6() { return cGroup_6; }

		//VisualCustomOption
		public RuleCall getVisualCustomOptionParserRuleCall_6_0() { return cVisualCustomOptionParserRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//funcs+=Function
		public Assignment getFuncsAssignment_6_2() { return cFuncsAssignment_6_2; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_6_2_0() { return cFuncsFunctionParserRuleCall_6_2_0; }

		//("," funcs+=Function)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//funcs+=Function
		public Assignment getFuncsAssignment_6_3_1() { return cFuncsAssignment_6_3_1; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_6_3_1_0() { return cFuncsFunctionParserRuleCall_6_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }

		//VisualMultival "(" funcs+=Function ("," funcs+=Function)* ")"
		public Group getGroup_7() { return cGroup_7; }

		//VisualMultival
		public RuleCall getVisualMultivalParserRuleCall_7_0() { return cVisualMultivalParserRuleCall_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//funcs+=Function
		public Assignment getFuncsAssignment_7_2() { return cFuncsAssignment_7_2; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_7_2_0() { return cFuncsFunctionParserRuleCall_7_2_0; }

		//("," funcs+=Function)*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//funcs+=Function
		public Assignment getFuncsAssignment_7_3_1() { return cFuncsAssignment_7_3_1; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_7_3_1_0() { return cFuncsFunctionParserRuleCall_7_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//SelectOption
		public RuleCall getSelectOptionParserRuleCall_8() { return cSelectOptionParserRuleCall_8; }

		//LinkOption
		public RuleCall getLinkOptionParserRuleCall_9() { return cLinkOptionParserRuleCall_9; }
	}

	public class SelectEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectEvent");
		private final RuleCall cValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SelectEvent:
		//	Value;
		@Override public ParserRule getRule() { return rule; }

		//Value
		public RuleCall getValueParserRuleCall() { return cValueParserRuleCall; }
	}

	public class SelectOptionMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectOptionMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOKENParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTOKENParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cTOKENParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//SelectOptionMapping:
		//	TOKEN "->" TOKEN ("," TOKEN)*;
		@Override public ParserRule getRule() { return rule; }

		//TOKEN "->" TOKEN ("," TOKEN)*
		public Group getGroup() { return cGroup; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_0() { return cTOKENParserRuleCall_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_2() { return cTOKENParserRuleCall_2; }

		//("," TOKEN)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_3_1() { return cTOKENParserRuleCall_3_1; }
	}

	public class SelectOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSelectEventParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMapsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMapsSelectOptionMappingParserRuleCall_3_0 = (RuleCall)cMapsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMapsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMapsSelectOptionMappingParserRuleCall_4_1_0 = (RuleCall)cMapsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectOption:
		//	"SELECTS" "(" (SelectEvent ",")? maps+=SelectOptionMapping ("," maps+=SelectOptionMapping)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"SELECTS" "(" (SelectEvent ",")? maps+=SelectOptionMapping ("," maps+=SelectOptionMapping)* ")"
		public Group getGroup() { return cGroup; }

		//"SELECTS"
		public Keyword getSELECTSKeyword_0() { return cSELECTSKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(SelectEvent ",")?
		public Group getGroup_2() { return cGroup_2; }

		//SelectEvent
		public RuleCall getSelectEventParserRuleCall_2_0() { return cSelectEventParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//maps+=SelectOptionMapping
		public Assignment getMapsAssignment_3() { return cMapsAssignment_3; }

		//SelectOptionMapping
		public RuleCall getMapsSelectOptionMappingParserRuleCall_3_0() { return cMapsSelectOptionMappingParserRuleCall_3_0; }

		//("," maps+=SelectOptionMapping)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//maps+=SelectOptionMapping
		public Assignment getMapsAssignment_4_1() { return cMapsAssignment_4_1; }

		//SelectOptionMapping
		public RuleCall getMapsSelectOptionMappingParserRuleCall_4_1_0() { return cMapsSelectOptionMappingParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class LinkOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLINKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTOKENParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOpsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOpsVisualOptionParserRuleCall_3_1_0 = (RuleCall)cOpsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LinkOption:
		//	"LINK" "(" name=TOKEN ("," ops+=VisualOption)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"LINK" "(" name=TOKEN ("," ops+=VisualOption)* ")"
		public Group getGroup() { return cGroup; }

		//"LINK"
		public Keyword getLINKKeyword_0() { return cLINKKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//name=TOKEN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_2_0() { return cNameTOKENParserRuleCall_2_0; }

		//("," ops+=VisualOption)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ops+=VisualOption
		public Assignment getOpsAssignment_3_1() { return cOpsAssignment_3_1; }

		//VisualOption
		public RuleCall getOpsVisualOptionParserRuleCall_3_1_0() { return cOpsVisualOptionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class VisualMultivalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualMultival");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameXKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameYKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameCOLORKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNameRANGEKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNameFILTERKeyword_4_0 = (Keyword)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNameLABELKeyword_5_0 = (Keyword)cNameAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cNameVALUEKeyword_6_0 = (Keyword)cNameAssignment_6.eContents().get(0);
		private final Assignment cNameAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cNameSORTKeyword_7_0 = (Keyword)cNameAssignment_7.eContents().get(0);
		private final Assignment cNameAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNameBRANCHESKeyword_8_0 = (Keyword)cNameAssignment_8.eContents().get(0);
		
		//VisualMultival:
		//	name="X" | name="Y" | name="COLOR" | name="RANGE" | name="FILTER" | name="LABEL" | name="VALUE" | name="SORT" |
		//	name="BRANCHES";
		@Override public ParserRule getRule() { return rule; }

		//name="X" | name="Y" | name="COLOR" | name="RANGE" | name="FILTER" | name="LABEL" | name="VALUE" | name="SORT" |
		//name="BRANCHES"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="X"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"X"
		public Keyword getNameXKeyword_0_0() { return cNameXKeyword_0_0; }

		//name="Y"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Y"
		public Keyword getNameYKeyword_1_0() { return cNameYKeyword_1_0; }

		//name="COLOR"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"COLOR"
		public Keyword getNameCOLORKeyword_2_0() { return cNameCOLORKeyword_2_0; }

		//name="RANGE"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"RANGE"
		public Keyword getNameRANGEKeyword_3_0() { return cNameRANGEKeyword_3_0; }

		//name="FILTER"
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//"FILTER"
		public Keyword getNameFILTERKeyword_4_0() { return cNameFILTERKeyword_4_0; }

		//name="LABEL"
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//"LABEL"
		public Keyword getNameLABELKeyword_5_0() { return cNameLABELKeyword_5_0; }

		//name="VALUE"
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//"VALUE"
		public Keyword getNameVALUEKeyword_6_0() { return cNameVALUEKeyword_6_0; }

		//name="SORT"
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }

		//"SORT"
		public Keyword getNameSORTKeyword_7_0() { return cNameSORTKeyword_7_0; }

		//name="BRANCHES"
		public Assignment getNameAssignment_8() { return cNameAssignment_8; }

		//"BRANCHES"
		public Keyword getNameBRANCHESKeyword_8_0() { return cNameBRANCHESKeyword_8_0; }
	}

	public class VisibilityOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibilityOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameMODALKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameVISIBLEKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//VisibilityOption:
		//	name="MODAL" | name="VISIBLE";
		@Override public ParserRule getRule() { return rule; }

		//name="MODAL" | name="VISIBLE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="MODAL"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"MODAL"
		public Keyword getNameMODALKeyword_0_0() { return cNameMODALKeyword_0_0; }

		//name="VISIBLE"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"VISIBLE"
		public Keyword getNameVISIBLEKeyword_1_0() { return cNameVISIBLEKeyword_1_0; }
	}

	public class VisualCustomOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualCustomOption");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTOKENParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VisualCustomOption:
		//	name=TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//name=TOKEN
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TOKEN
		public RuleCall getNameTOKENParserRuleCall_0() { return cNameTOKENParserRuleCall_0; }
	}

	public class CustomSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCUSTOMKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cCust_valsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCust_valsCustomValueParserRuleCall_1_0 = (RuleCall)cCust_valsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CustomSection:
		//	name="CUSTOM" cust_vals+=CustomValue* => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="CUSTOM" cust_vals+=CustomValue* => "END"
		public Group getGroup() { return cGroup; }

		//name="CUSTOM"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"CUSTOM"
		public Keyword getNameCUSTOMKeyword_0_0() { return cNameCUSTOMKeyword_0_0; }

		//cust_vals+=CustomValue*
		public Assignment getCust_valsAssignment_1() { return cCust_valsAssignment_1; }

		//CustomValue
		public RuleCall getCust_valsCustomValueParserRuleCall_1_0() { return cCust_valsCustomValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class CustomValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOKENParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CustomValue:
		//	TOKEN Value ";";
		@Override public ParserRule getRule() { return rule; }

		//TOKEN Value ";"
		public Group getGroup() { return cGroup; }

		//TOKEN
		public RuleCall getTOKENParserRuleCall_0() { return cTOKENParserRuleCall_0; }

		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ResourceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameLOGICALFILEKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameINDEXKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameSUPERFILEKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNameECLKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNameFILEKeyword_4_0 = (Keyword)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNameIMAGEKeyword_5_0 = (Keyword)cNameAssignment_5.eContents().get(0);
		
		//ResourceType:
		//	name="LOGICALFILE" | name="INDEX" | name="SUPERFILE" | name="ECL" | name="FILE" | name="IMAGE";
		@Override public ParserRule getRule() { return rule; }

		//name="LOGICALFILE" | name="INDEX" | name="SUPERFILE" | name="ECL" | name="FILE" | name="IMAGE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="LOGICALFILE"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"LOGICALFILE"
		public Keyword getNameLOGICALFILEKeyword_0_0() { return cNameLOGICALFILEKeyword_0_0; }

		//name="INDEX"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"INDEX"
		public Keyword getNameINDEXKeyword_1_0() { return cNameINDEXKeyword_1_0; }

		//name="SUPERFILE"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"SUPERFILE"
		public Keyword getNameSUPERFILEKeyword_2_0() { return cNameSUPERFILEKeyword_2_0; }

		//name="ECL"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"ECL"
		public Keyword getNameECLKeyword_3_0() { return cNameECLKeyword_3_0; }

		//name="FILE"
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//"FILE"
		public Keyword getNameFILEKeyword_4_0() { return cNameFILEKeyword_4_0; }

		//name="IMAGE"
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//"IMAGE"
		public Keyword getNameIMAGEKeyword_5_0() { return cNameIMAGEKeyword_5_0; }
	}

	public class ResourceOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFONTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVALUEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDESCRIPTIONKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cFILENAMEKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cLABELKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cURLKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cDALIIPKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cCLUSTERKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final RuleCall cVisualCustomOptionParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_2_0 = (RuleCall)cValsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResourceOption:
		//	("FONT" | "VALUE" | "DESCRIPTION" | "FILENAME" | "LABEL" | "URL" | "DALIIP" | "CLUSTER" | VisualCustomOption) "("
		//	vals=Value ")";
		@Override public ParserRule getRule() { return rule; }

		//("FONT" | "VALUE" | "DESCRIPTION" | "FILENAME" | "LABEL" | "URL" | "DALIIP" | "CLUSTER" | VisualCustomOption) "("
		//vals=Value ")"
		public Group getGroup() { return cGroup; }

		//"FONT" | "VALUE" | "DESCRIPTION" | "FILENAME" | "LABEL" | "URL" | "DALIIP" | "CLUSTER" | VisualCustomOption
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"FONT"
		public Keyword getFONTKeyword_0_0() { return cFONTKeyword_0_0; }

		//"VALUE"
		public Keyword getVALUEKeyword_0_1() { return cVALUEKeyword_0_1; }

		//"DESCRIPTION"
		public Keyword getDESCRIPTIONKeyword_0_2() { return cDESCRIPTIONKeyword_0_2; }

		//"FILENAME"
		public Keyword getFILENAMEKeyword_0_3() { return cFILENAMEKeyword_0_3; }

		//"LABEL"
		public Keyword getLABELKeyword_0_4() { return cLABELKeyword_0_4; }

		//"URL"
		public Keyword getURLKeyword_0_5() { return cURLKeyword_0_5; }

		//"DALIIP"
		public Keyword getDALIIPKeyword_0_6() { return cDALIIPKeyword_0_6; }

		//"CLUSTER"
		public Keyword getCLUSTERKeyword_0_7() { return cCLUSTERKeyword_0_7; }

		//VisualCustomOption
		public RuleCall getVisualCustomOptionParserRuleCall_0_8() { return cVisualCustomOptionParserRuleCall_0_8; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//vals=Value
		public Assignment getValsAssignment_2() { return cValsAssignment_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_2_0() { return cValsValueParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ResourceOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRes_opsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRes_opsResourceOptionParserRuleCall_0_0 = (RuleCall)cRes_opsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRes_opsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRes_opsResourceOptionParserRuleCall_1_1_0 = (RuleCall)cRes_opsAssignment_1_1.eContents().get(0);
		
		//ResourceOptions:
		//	res_ops+=ResourceOption ("," res_ops+=ResourceOption)*;
		@Override public ParserRule getRule() { return rule; }

		//res_ops+=ResourceOption ("," res_ops+=ResourceOption)*
		public Group getGroup() { return cGroup; }

		//res_ops+=ResourceOption
		public Assignment getRes_opsAssignment_0() { return cRes_opsAssignment_0; }

		//ResourceOption
		public RuleCall getRes_opsResourceOptionParserRuleCall_0_0() { return cRes_opsResourceOptionParserRuleCall_0_0; }

		//("," res_ops+=ResourceOption)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//res_ops+=ResourceOption
		public Assignment getRes_opsAssignment_1_1() { return cRes_opsAssignment_1_1; }

		//ResourceOption
		public RuleCall getRes_opsResourceOptionParserRuleCall_1_1_0() { return cRes_opsResourceOptionParserRuleCall_1_1_0; }
	}

	public class ResourceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRes_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRes_opsResourceOptionsParserRuleCall_2_0 = (RuleCall)cRes_opsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResourceValue:
		//	Value ":" res_ops=ResourceOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//Value ":" res_ops=ResourceOptions? ";"
		public Group getGroup() { return cGroup; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//res_ops=ResourceOptions?
		public Assignment getRes_opsAssignment_2() { return cRes_opsAssignment_2; }

		//ResourceOptions
		public RuleCall getRes_opsResourceOptionsParserRuleCall_2_0() { return cRes_opsResourceOptionsParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ResourceSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRESOURCESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cRes_valsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRes_valsResourceValueParserRuleCall_1_0 = (RuleCall)cRes_valsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ResourceSection:
		//	name="RESOURCES" res_vals+=ResourceValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="RESOURCES" res_vals+=ResourceValue+ => "END"
		public Group getGroup() { return cGroup; }

		//name="RESOURCES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"RESOURCES"
		public Keyword getNameRESOURCESKeyword_0_0() { return cNameRESOURCESKeyword_0_0; }

		//res_vals+=ResourceValue+
		public Assignment getRes_valsAssignment_1() { return cRes_valsAssignment_1; }

		//ResourceValue
		public RuleCall getRes_valsResourceValueParserRuleCall_1_0() { return cRes_valsResourceValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final BasePropElements pBaseProp;
	private final CategoryTypeElements pCategoryType;
	private final CategoryTypeListElements pCategoryTypeList;
	private final ValueElements pValue;
	private final ValueListElements pValueList;
	private final TOKENElements pTOKEN;
	private final UTOKENElements pUTOKEN;
	private final TOKEN_listElements pTOKEN_list;
	private final AssignElements pAssign;
	private final AssignListElements pAssignList;
	private final CompositionHeaderElements pCompositionHeader;
	private final InstanceIDElements pInstanceID;
	private final InstanceOptionsElements pInstanceOptions;
	private final InstanceOptionElements pInstanceOption;
	private final ContractInstanceElements pContractInstance;
	private final FieldDeclElements pFieldDecl;
	private final KelAttrDeclElements pKelAttrDecl;
	private final KelEntityDeclSimpleElements pKelEntityDeclSimple;
	private final KelEntityDeclElements pKelEntityDecl;
	private final EnumEntryElements pEnumEntry;
	private final EnumListElements pEnumList;
	private final EnumDeclElements pEnumDecl;
	private final InputSectionElements pInputSection;
	private final BoolElements pBool;
	private final IntVarElements pIntVar;
	private final StringVarElements pStringVar;
	private final DatasetElements pDataset;
	private final GroupElements pGroup;
	private final RealElements pReal;
	private final InputSimpleTypesElements pInputSimpleTypes;
	private final RecordElements pRecord;
	private final KelBaseElements pKelBase;
	private final DatatypeElements pDatatype;
	private final InputValueElements pInputValue;
	private final InputOptionsElements pInputOptions;
	private final InputOptionElements pInputOption;
	private final FormfieldOptionElements pFormfieldOption;
	private final InputtypeOptionElements pInputtypeOption;
	private final InputtypeOptionsElements pInputtypeOptions;
	private final IntegrateSectionElements pIntegrateSection;
	private final OutputSectionElements pOutputSection;
	private final OutfieldDeclElements pOutfieldDecl;
	private final ECLIntegerElements pECLInteger;
	private final ECLUnsignedElements pECLUnsigned;
	private final ECLStringElements pECLString;
	private final ECLQstringElements pECLQstring;
	private final ECLVarstringElements pECLVarstring;
	private final ECLUnicodeElements pECLUnicode;
	private final ECLVarunicodeElements pECLVarunicode;
	private final ECLDataElements pECLData;
	private final ECLRealElements pECLReal;
	private final ECLBooleanElements pECLBoolean;
	private final ECLNumTypeElements pECLNumType;
	private final ECLDecTypeElements pECLDecType;
	private final ECLfieldTypeElements pECLfieldType;
	private final ECLOutputDeclElements pECLOutputDecl;
	private final ServiceInputValueElements pServiceInputValue;
	private final ServiceInputSectionElements pServiceInputSection;
	private final NestedDatasetDeclElements pNestedDatasetDecl;
	private final OutputOptionElements pOutputOption;
	private final OutputOptionsElements pOutputOptions;
	private final OutTypeSimpleElements pOutTypeSimple;
	private final OutDatasetElements pOutDataset;
	private final ServiceElements pService;
	private final OutputValueElements pOutputValue;
	private final OutputBaseElements pOutputBase;
	private final PermissionsElements pPermissions;
	private final PermissionElements pPermission;
	private final CustomPermissionLevelElements pCustomPermissionLevel;
	private final GenerateSectionElements pGenerateSection;
	private final GenerateBodyInlineElements pGenerateBodyInline;
	private final GenerateBodySaltElements pGenerateBodySalt;
	private final GenerateBodyKelElements pGenerateBodyKel;
	private final VisualSectionElements pVisualSection;
	private final VisNameElements pVisName;
	private final VisInputValueElements pVisInputValue;
	private final VisBasisParensElements pVisBasisParens;
	private final VisualizationElements pVisualization;
	private final VisBasisElements pVisBasis;
	private final VisFilterElements pVisFilter;
	private final VisBasisQualifiersElements pVisBasisQualifiers;
	private final PosVizDataElements pPosVizData;
	private final FunctionElements pFunction;
	private final QFunctionElements pQFunction;
	private final NestBasisQualifierElements pNestBasisQualifier;
	private final CountFunctionElements pCountFunction;
	private final AggFunctionElements pAggFunction;
	private final VisualSectionOptionsElements pVisualSectionOptions;
	private final VisualSectionOptionElements pVisualSectionOption;
	private final VizAssignElements pVizAssign;
	private final VizAssignListElements pVizAssignList;
	private final VizEnumDeclElements pVizEnumDecl;
	private final VisualOptionsElements pVisualOptions;
	private final VisualOptionElements pVisualOption;
	private final SelectEventElements pSelectEvent;
	private final SelectOptionMappingElements pSelectOptionMapping;
	private final SelectOptionElements pSelectOption;
	private final LinkOptionElements pLinkOption;
	private final VisualMultivalElements pVisualMultival;
	private final VisibilityOptionElements pVisibilityOption;
	private final VisualCustomOptionElements pVisualCustomOption;
	private final CustomSectionElements pCustomSection;
	private final CustomValueElements pCustomValue;
	private final ResourceTypeElements pResourceType;
	private final ResourceOptionElements pResourceOption;
	private final ResourceOptionsElements pResourceOptions;
	private final ResourceValueElements pResourceValue;
	private final ResourceSectionElements pResourceSection;
	private final TerminalRule tWS;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tECLNUMBEREDTYPE;
	private final TerminalRule tECLDECIMALTYPE;
	private final TerminalRule tGEN_BLOCK;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HIPIEGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pBaseProp = new BasePropElements();
		this.pCategoryType = new CategoryTypeElements();
		this.pCategoryTypeList = new CategoryTypeListElements();
		this.pValue = new ValueElements();
		this.pValueList = new ValueListElements();
		this.pTOKEN = new TOKENElements();
		this.pUTOKEN = new UTOKENElements();
		this.pTOKEN_list = new TOKEN_listElements();
		this.pAssign = new AssignElements();
		this.pAssignList = new AssignListElements();
		this.pCompositionHeader = new CompositionHeaderElements();
		this.pInstanceID = new InstanceIDElements();
		this.pInstanceOptions = new InstanceOptionsElements();
		this.pInstanceOption = new InstanceOptionElements();
		this.pContractInstance = new ContractInstanceElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pKelAttrDecl = new KelAttrDeclElements();
		this.pKelEntityDeclSimple = new KelEntityDeclSimpleElements();
		this.pKelEntityDecl = new KelEntityDeclElements();
		this.pEnumEntry = new EnumEntryElements();
		this.pEnumList = new EnumListElements();
		this.pEnumDecl = new EnumDeclElements();
		this.pInputSection = new InputSectionElements();
		this.pBool = new BoolElements();
		this.pIntVar = new IntVarElements();
		this.pStringVar = new StringVarElements();
		this.pDataset = new DatasetElements();
		this.pGroup = new GroupElements();
		this.pReal = new RealElements();
		this.pInputSimpleTypes = new InputSimpleTypesElements();
		this.pRecord = new RecordElements();
		this.pKelBase = new KelBaseElements();
		this.pDatatype = new DatatypeElements();
		this.pInputValue = new InputValueElements();
		this.pInputOptions = new InputOptionsElements();
		this.pInputOption = new InputOptionElements();
		this.pFormfieldOption = new FormfieldOptionElements();
		this.pInputtypeOption = new InputtypeOptionElements();
		this.pInputtypeOptions = new InputtypeOptionsElements();
		this.pIntegrateSection = new IntegrateSectionElements();
		this.pOutputSection = new OutputSectionElements();
		this.pOutfieldDecl = new OutfieldDeclElements();
		this.pECLInteger = new ECLIntegerElements();
		this.pECLUnsigned = new ECLUnsignedElements();
		this.pECLString = new ECLStringElements();
		this.pECLQstring = new ECLQstringElements();
		this.pECLVarstring = new ECLVarstringElements();
		this.pECLUnicode = new ECLUnicodeElements();
		this.pECLVarunicode = new ECLVarunicodeElements();
		this.pECLData = new ECLDataElements();
		this.pECLReal = new ECLRealElements();
		this.pECLBoolean = new ECLBooleanElements();
		this.pECLNumType = new ECLNumTypeElements();
		this.pECLDecType = new ECLDecTypeElements();
		this.pECLfieldType = new ECLfieldTypeElements();
		this.pECLOutputDecl = new ECLOutputDeclElements();
		this.pServiceInputValue = new ServiceInputValueElements();
		this.pServiceInputSection = new ServiceInputSectionElements();
		this.pNestedDatasetDecl = new NestedDatasetDeclElements();
		this.pOutputOption = new OutputOptionElements();
		this.pOutputOptions = new OutputOptionsElements();
		this.pOutTypeSimple = new OutTypeSimpleElements();
		this.pOutDataset = new OutDatasetElements();
		this.pService = new ServiceElements();
		this.pOutputValue = new OutputValueElements();
		this.pOutputBase = new OutputBaseElements();
		this.pPermissions = new PermissionsElements();
		this.pPermission = new PermissionElements();
		this.pCustomPermissionLevel = new CustomPermissionLevelElements();
		this.pGenerateSection = new GenerateSectionElements();
		this.pGenerateBodyInline = new GenerateBodyInlineElements();
		this.pGenerateBodySalt = new GenerateBodySaltElements();
		this.pGenerateBodyKel = new GenerateBodyKelElements();
		this.pVisualSection = new VisualSectionElements();
		this.pVisName = new VisNameElements();
		this.pVisInputValue = new VisInputValueElements();
		this.pVisBasisParens = new VisBasisParensElements();
		this.pVisualization = new VisualizationElements();
		this.pVisBasis = new VisBasisElements();
		this.pVisFilter = new VisFilterElements();
		this.pVisBasisQualifiers = new VisBasisQualifiersElements();
		this.pPosVizData = new PosVizDataElements();
		this.pFunction = new FunctionElements();
		this.pQFunction = new QFunctionElements();
		this.pNestBasisQualifier = new NestBasisQualifierElements();
		this.pCountFunction = new CountFunctionElements();
		this.pAggFunction = new AggFunctionElements();
		this.pVisualSectionOptions = new VisualSectionOptionsElements();
		this.pVisualSectionOption = new VisualSectionOptionElements();
		this.pVizAssign = new VizAssignElements();
		this.pVizAssignList = new VizAssignListElements();
		this.pVizEnumDecl = new VizEnumDeclElements();
		this.pVisualOptions = new VisualOptionsElements();
		this.pVisualOption = new VisualOptionElements();
		this.pSelectEvent = new SelectEventElements();
		this.pSelectOptionMapping = new SelectOptionMappingElements();
		this.pSelectOption = new SelectOptionElements();
		this.pLinkOption = new LinkOptionElements();
		this.pVisualMultival = new VisualMultivalElements();
		this.pVisibilityOption = new VisibilityOptionElements();
		this.pVisualCustomOption = new VisualCustomOptionElements();
		this.pCustomSection = new CustomSectionElements();
		this.pCustomValue = new CustomValueElements();
		this.pResourceType = new ResourceTypeElements();
		this.pResourceOption = new ResourceOptionElements();
		this.pResourceOptions = new ResourceOptionsElements();
		this.pResourceValue = new ResourceValueElements();
		this.pResourceSection = new ResourceSectionElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tECLNUMBEREDTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ECLNUMBEREDTYPE");
		this.tECLDECIMALTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ECLDECIMALTYPE");
		this.tGEN_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GEN_BLOCK");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.hipie.HIPIE".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	composition_header+=CompositionHeader? base_props+=BaseProp+ permissions=Permissions? input_section+=InputSection?
	//	contract_instances+=ContractInstance* output_section+=OutputSection? integrate_section=IntegrateSection?
	//	visual_section+=VisualSection* generate_section+=GenerateSection? custom_section+=CustomSection?
	//	resource_section+=ResourceSection?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//BaseProp:
	//	(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL"
	//	| name="ID" | name="TEMPLATE") val_list=ValueList ";" | name="CATEGORY" cat_list=CategoryTypeList ";";
	public BasePropElements getBasePropAccess() {
		return pBaseProp;
	}
	
	public ParserRule getBasePropRule() {
		return getBasePropAccess().getRule();
	}

	//CategoryType:
	//	name=("CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT");
	public CategoryTypeElements getCategoryTypeAccess() {
		return pCategoryType;
	}
	
	public ParserRule getCategoryTypeRule() {
		return getCategoryTypeAccess().getRule();
	}

	//CategoryTypeList:
	//	cats+=CategoryType ("," cats+=CategoryType)*;
	public CategoryTypeListElements getCategoryTypeListAccess() {
		return pCategoryTypeList;
	}
	
	public ParserRule getCategoryTypeListRule() {
		return getCategoryTypeListAccess().getRule();
	}

	//Value:
	//	name=UTOKEN | name=TOKEN | int_val=INT | str_val=STRING;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ValueList:
	//	vals+=Value ("," vals+=Value)*;
	public ValueListElements getValueListAccess() {
		return pValueList;
	}
	
	public ParserRule getValueListRule() {
		return getValueListAccess().getRule();
	}

	//TOKEN:
	//	ID;
	public TOKENElements getTOKENAccess() {
		return pTOKEN;
	}
	
	public ParserRule getTOKENRule() {
		return getTOKENAccess().getRule();
	}

	//UTOKEN:
	//	"_" ID;
	public UTOKENElements getUTOKENAccess() {
		return pUTOKEN;
	}
	
	public ParserRule getUTOKENRule() {
		return getUTOKENAccess().getRule();
	}

	//TOKEN_list:
	//	TOKEN ("," TOKEN)*;
	public TOKEN_listElements getTOKEN_listAccess() {
		return pTOKEN_list;
	}
	
	public ParserRule getTOKEN_listRule() {
		return getTOKEN_listAccess().getRule();
	}

	//Assign:
	//	vals_l=Value "=" vals_r=ValueList;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//AssignList:
	//	assigns+=Assign ("," assigns+=Assign)*;
	public AssignListElements getAssignListAccess() {
		return pAssignList;
	}
	
	public ParserRule getAssignListRule() {
		return getAssignListAccess().getRule();
	}

	//CompositionHeader:
	//	name="HEADER" assigns+=Assign* => "END";
	public CompositionHeaderElements getCompositionHeaderAccess() {
		return pCompositionHeader;
	}
	
	public ParserRule getCompositionHeaderRule() {
		return getCompositionHeaderAccess().getRule();
	}

	//InstanceID:
	//	"(" name=TOKEN ")";
	public InstanceIDElements getInstanceIDAccess() {
		return pInstanceID;
	}
	
	public ParserRule getInstanceIDRule() {
		return getInstanceIDAccess().getRule();
	}

	//InstanceOptions:
	//	":" in_ops+=InstanceOption ("," in_ops+=InstanceOption)*;
	public InstanceOptionsElements getInstanceOptionsAccess() {
		return pInstanceOptions;
	}
	
	public ParserRule getInstanceOptionsRule() {
		return getInstanceOptionsAccess().getRule();
	}

	//InstanceOption:
	//	("LABEL" | "VERSION") "(" ValueList ")";
	public InstanceOptionElements getInstanceOptionAccess() {
		return pInstanceOption;
	}
	
	public ParserRule getInstanceOptionRule() {
		return getInstanceOptionAccess().getRule();
	}

	//ContractInstance:
	//	sec_name="INSTANCE" TOKEN instId=InstanceID instance_ops=InstanceOptions? assigns+=Assign* "END";
	public ContractInstanceElements getContractInstanceAccess() {
		return pContractInstance;
	}
	
	public ParserRule getContractInstanceRule() {
		return getContractInstanceAccess().getRule();
	}

	//FieldDecl:
	//	"FIELD" name=TOKEN input_ops=InputOptions? ";";
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}

	//KelAttrDecl:
	//	"ATTRIBUTE" name=TOKEN input_ops=InputOptions? ";";
	public KelAttrDeclElements getKelAttrDeclAccess() {
		return pKelAttrDecl;
	}
	
	public ParserRule getKelAttrDeclRule() {
		return getKelAttrDeclAccess().getRule();
	}

	//KelEntityDeclSimple:
	//	"ENTITY" name=TOKEN input_ops=InputOptions? ";";
	public KelEntityDeclSimpleElements getKelEntityDeclSimpleAccess() {
		return pKelEntityDeclSimple;
	}
	
	public ParserRule getKelEntityDeclSimpleRule() {
		return getKelEntityDeclSimpleAccess().getRule();
	}

	//KelEntityDecl:
	//	"ENTITY" name=TOKEN input_ops=InputOptions? attrdecl=KelAttrDecl? => "END";
	public KelEntityDeclElements getKelEntityDeclAccess() {
		return pKelEntityDecl;
	}
	
	public ParserRule getKelEntityDeclRule() {
		return getKelEntityDeclAccess().getRule();
	}

	//EnumEntry:
	//	val_l=Value ("=" val_r=Value)?;
	public EnumEntryElements getEnumEntryAccess() {
		return pEnumEntry;
	}
	
	public ParserRule getEnumEntryRule() {
		return getEnumEntryAccess().getRule();
	}

	//EnumList:
	//	en_ents+=EnumEntry ("," en_ents+=EnumEntry)*;
	public EnumListElements getEnumListAccess() {
		return pEnumList;
	}
	
	public ParserRule getEnumListRule() {
		return getEnumListAccess().getRule();
	}

	//EnumDecl:
	//	enum_dec="ENUM" "(" enum_list=EnumList ")";
	public EnumDeclElements getEnumDeclAccess() {
		return pEnumDecl;
	}
	
	public ParserRule getEnumDeclRule() {
		return getEnumDeclAccess().getRule();
	}

	//InputSection:
	//	name="INPUTS" inputs+=InputValue+ => "END";
	public InputSectionElements getInputSectionAccess() {
		return pInputSection;
	}
	
	public ParserRule getInputSectionRule() {
		return getInputSectionAccess().getRule();
	}

	//Bool:
	//	"BOOL" name=TOKEN;
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//IntVar:
	//	"INT" name=TOKEN;
	public IntVarElements getIntVarAccess() {
		return pIntVar;
	}
	
	public ParserRule getIntVarRule() {
		return getIntVarAccess().getRule();
	}

	//StringVar:
	//	"STRING" name=TOKEN;
	public StringVarElements getStringVarAccess() {
		return pStringVar;
	}
	
	public ParserRule getStringVarRule() {
		return getStringVarAccess().getRule();
	}

	//Dataset:
	//	"DATASET" name=TOKEN;
	public DatasetElements getDatasetAccess() {
		return pDataset;
	}
	
	public ParserRule getDatasetRule() {
		return getDatasetAccess().getRule();
	}

	//Group:
	//	"GROUP" name=TOKEN;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//Real:
	//	"REAL" name=TOKEN;
	public RealElements getRealAccess() {
		return pReal;
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//InputSimpleTypes:
	//	Bool | IntVar | EnumDecl | StringVar | Real;
	public InputSimpleTypesElements getInputSimpleTypesAccess() {
		return pInputSimpleTypes;
	}
	
	public ParserRule getInputSimpleTypesRule() {
		return getInputSimpleTypesAccess().getRule();
	}

	//Record:
	//	"RECORD" name=TOKEN;
	public RecordElements getRecordAccess() {
		return pRecord;
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//KelBase:
	//	"KELBASE" name=TOKEN;
	public KelBaseElements getKelBaseAccess() {
		return pKelBase;
	}
	
	public ParserRule getKelBaseRule() {
		return getKelBaseAccess().getRule();
	}

	//Datatype:
	//	InputSimpleTypes | Record | Dataset | KelBase | Group;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//InputValue:
	//	(InputSimpleTypes | Record | Dataset) input_op_list=InputOptions? ";" | Dataset input_op_list=InputOptions?
	//	fields+=FieldDecl* => "END" | KelBase input_op_list=InputOptions? (kel_ops+=KelEntityDecl |
	//	kel_ops+=KelEntityDeclSimple | kel_ops+=KelAttrDecl)* | Group input_op_list=InputOptions? vals+=InputValue* => "END";
	public InputValueElements getInputValueAccess() {
		return pInputValue;
	}
	
	public ParserRule getInputValueRule() {
		return getInputValueAccess().getRule();
	}

	//InputOptions:
	//	":" input_ops+=InputOption ("," input_ops+=InputOption)*;
	public InputOptionsElements getInputOptionsAccess() {
		return pInputOptions;
	}
	
	public ParserRule getInputOptionsRule() {
		return getInputOptionsAccess().getRule();
	}

	//InputOption:
	//	(atr="OPTIONAL" | atr="DEFINED" | atr="DISABLED" | atr="MAPBYTYPE" | atr="MAPBYNAME" | atr="MANY") | form="FORMFIELD"
	//	"(" form_op=FormfieldOption ")" | enab="ENABLE" "(" assigns_list=AssignList ")" | type="TYPE" "("
	//	type_op=InputtypeOptions ")" | (atr="RANGE" | atr="DEFAULT" | atr="MAXLENGTH" | atr="DISABLED" | atr="DESCRIPTION" |
	//	atr="NULL" | atr="FIELDLENGTH" | atr="ROWS" | atr="COLS" | atr="_HTML_STYLECLASS" | atr="LABEL") "(" vals+=ValueList
	//	")";
	public InputOptionElements getInputOptionAccess() {
		return pInputOption;
	}
	
	public ParserRule getInputOptionRule() {
		return getInputOptionAccess().getRule();
	}

	//FormfieldOption:
	//	"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT";
	public FormfieldOptionElements getFormfieldOptionAccess() {
		return pFormfieldOption;
	}
	
	public ParserRule getFormfieldOptionRule() {
		return getFormfieldOptionAccess().getRule();
	}

	//InputtypeOption:
	//	"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL";
	public InputtypeOptionElements getInputtypeOptionAccess() {
		return pInputtypeOption;
	}
	
	public ParserRule getInputtypeOptionRule() {
		return getInputtypeOptionAccess().getRule();
	}

	//InputtypeOptions:
	//	in_type_op+=InputtypeOption ("," in_type_op+=InputtypeOption)*;
	public InputtypeOptionsElements getInputtypeOptionsAccess() {
		return pInputtypeOptions;
	}
	
	public ParserRule getInputtypeOptionsRule() {
		return getInputtypeOptionsAccess().getRule();
	}

	//IntegrateSection:
	//	name="INTEGRATE" outputs+=OutputValue+ => "END";
	public IntegrateSectionElements getIntegrateSectionAccess() {
		return pIntegrateSection;
	}
	
	public ParserRule getIntegrateSectionRule() {
		return getIntegrateSectionAccess().getRule();
	}

	//OutputSection:
	//	name="OUTPUTS" outputs+=OutputValue+ => "END";
	public OutputSectionElements getOutputSectionAccess() {
		return pOutputSection;
	}
	
	public ParserRule getOutputSectionRule() {
		return getOutputSectionAccess().getRule();
	}

	//OutfieldDecl:
	//	IntVar | Bool | StringVar | fields+=FieldDecl;
	public OutfieldDeclElements getOutfieldDeclAccess() {
		return pOutfieldDecl;
	}
	
	public ParserRule getOutfieldDeclRule() {
		return getOutfieldDeclAccess().getRule();
	}

	//ECLInteger:
	//	"INTEGER" INT? name=TOKEN;
	public ECLIntegerElements getECLIntegerAccess() {
		return pECLInteger;
	}
	
	public ParserRule getECLIntegerRule() {
		return getECLIntegerAccess().getRule();
	}

	//ECLUnsigned:
	//	"UNSIGNED" INT? name=TOKEN;
	public ECLUnsignedElements getECLUnsignedAccess() {
		return pECLUnsigned;
	}
	
	public ParserRule getECLUnsignedRule() {
		return getECLUnsignedAccess().getRule();
	}

	//ECLString:
	//	"STRING" INT? name=TOKEN;
	public ECLStringElements getECLStringAccess() {
		return pECLString;
	}
	
	public ParserRule getECLStringRule() {
		return getECLStringAccess().getRule();
	}

	//ECLQstring:
	//	"QSTRING" INT? name=TOKEN;
	public ECLQstringElements getECLQstringAccess() {
		return pECLQstring;
	}
	
	public ParserRule getECLQstringRule() {
		return getECLQstringAccess().getRule();
	}

	//ECLVarstring:
	//	"VARSTRING" INT? name=TOKEN;
	public ECLVarstringElements getECLVarstringAccess() {
		return pECLVarstring;
	}
	
	public ParserRule getECLVarstringRule() {
		return getECLVarstringAccess().getRule();
	}

	//ECLUnicode:
	//	"UNICODE" INT? name=TOKEN;
	public ECLUnicodeElements getECLUnicodeAccess() {
		return pECLUnicode;
	}
	
	public ParserRule getECLUnicodeRule() {
		return getECLUnicodeAccess().getRule();
	}

	//ECLVarunicode:
	//	"VARUNICODE" INT? name=TOKEN;
	public ECLVarunicodeElements getECLVarunicodeAccess() {
		return pECLVarunicode;
	}
	
	public ParserRule getECLVarunicodeRule() {
		return getECLVarunicodeAccess().getRule();
	}

	//ECLData:
	//	"DATA" name=TOKEN;
	public ECLDataElements getECLDataAccess() {
		return pECLData;
	}
	
	public ParserRule getECLDataRule() {
		return getECLDataAccess().getRule();
	}

	//ECLReal:
	//	"REAL" name=TOKEN;
	public ECLRealElements getECLRealAccess() {
		return pECLReal;
	}
	
	public ParserRule getECLRealRule() {
		return getECLRealAccess().getRule();
	}

	//ECLBoolean:
	//	"BOOL" name=TOKEN;
	public ECLBooleanElements getECLBooleanAccess() {
		return pECLBoolean;
	}
	
	public ParserRule getECLBooleanRule() {
		return getECLBooleanAccess().getRule();
	}

	//ECLNumType:
	//	ECLNUMBEREDTYPE INT? name=TOKEN;
	public ECLNumTypeElements getECLNumTypeAccess() {
		return pECLNumType;
	}
	
	public ParserRule getECLNumTypeRule() {
		return getECLNumTypeAccess().getRule();
	}

	//ECLDecType:
	//	ECLDECIMALTYPE INT? name=TOKEN;
	public ECLDecTypeElements getECLDecTypeAccess() {
		return pECLDecType;
	}
	
	public ParserRule getECLDecTypeRule() {
		return getECLDecTypeAccess().getRule();
	}

	//ECLfieldType:
	//	ECLInteger | ECLQstring | ECLString | ECLReal | ECLUnicode | ECLData | ECLVarstring | ECLVarunicode | ECLUnsigned |
	//	ECLNumType | ECLDecType | ECLBoolean;
	public ECLfieldTypeElements getECLfieldTypeAccess() {
		return pECLfieldType;
	}
	
	public ParserRule getECLfieldTypeRule() {
		return getECLfieldTypeAccess().getRule();
	}

	//ECLOutputDecl:
	//	ECLfieldType options=OutputOptions? ";" | NestedDatasetDecl;
	public ECLOutputDeclElements getECLOutputDeclAccess() {
		return pECLOutputDecl;
	}
	
	public ParserRule getECLOutputDeclRule() {
		return getECLOutputDeclAccess().getRule();
	}

	//ServiceInputValue:
	//	ECLfieldType in_ops=InputOptions? ";" | NestedDatasetDecl;
	public ServiceInputValueElements getServiceInputValueAccess() {
		return pServiceInputValue;
	}
	
	public ParserRule getServiceInputValueRule() {
		return getServiceInputValueAccess().getRule();
	}

	//ServiceInputSection:
	//	"INPUTS" servs+=ServiceInputValue+ => "END";
	public ServiceInputSectionElements getServiceInputSectionAccess() {
		return pServiceInputSection;
	}
	
	public ParserRule getServiceInputSectionRule() {
		return getServiceInputSectionAccess().getRule();
	}

	//NestedDatasetDecl:
	//	OutDataset options=OutputOptions? decl+=ECLOutputDecl+ => "END";
	public NestedDatasetDeclElements getNestedDatasetDeclAccess() {
		return pNestedDatasetDecl;
	}
	
	public ParserRule getNestedDatasetDeclRule() {
		return getNestedDatasetDeclAccess().getRule();
	}

	//OutputOption:
	//	type=("SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID" | "APPEND" | "SCOREDSEARCH" | "DATABOMB" | "OPTIONAL") | atr=("WUID"
	//	| "FROM") "(" name=TOKEN ")" | atr="ENABLE" "(" assigns=AssignList ")" | atr="PREFIX" "(" name=TOKEN ")" | atr=("WUID"
	//	| "FILLS" | "SOAP") "(" vals=ValueList ")" | atr=("DESCRIPTION" | "SOAP" | "JSON" | "ROXIE" | "XPATH") "(" vals=Value
	//	")";
	public OutputOptionElements getOutputOptionAccess() {
		return pOutputOption;
	}
	
	public ParserRule getOutputOptionRule() {
		return getOutputOptionAccess().getRule();
	}

	//OutputOptions:
	//	":" output_ops+=OutputOption ("," output_ops+=OutputOption)*;
	public OutputOptionsElements getOutputOptionsAccess() {
		return pOutputOptions;
	}
	
	public ParserRule getOutputOptionsRule() {
		return getOutputOptionsAccess().getRule();
	}

	//OutTypeSimple:
	//	type=("BOOL" | "INT" | "STRING" | "ACTION")? vals=Value;
	public OutTypeSimpleElements getOutTypeSimpleAccess() {
		return pOutTypeSimple;
	}
	
	public ParserRule getOutTypeSimpleRule() {
		return getOutTypeSimpleAccess().getRule();
	}

	//OutDataset:
	//	"DATASET" name=TOKEN out_base=OutputBase? ops=OutputOptions?;
	public OutDatasetElements getOutDatasetAccess() {
		return pOutDataset;
	}
	
	public ParserRule getOutDatasetRule() {
		return getOutDatasetAccess().getRule();
	}

	//Service:
	//	"SERVICE" name=TOKEN ops=OutputOptions serv=ServiceInputSection?;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//OutputValue:
	//	OutTypeSimple ";" | OutDataset ecl_vars+=ECLOutputDecl* => "END" | OutDataset ";" | Service ecl_vars+=ECLOutputDecl*
	//	=> "END" | Service ";";
	public OutputValueElements getOutputValueAccess() {
		return pOutputValue;
	}
	
	public ParserRule getOutputValueRule() {
		return getOutputValueAccess().getRule();
	}

	//OutputBase:
	//	"(" base=[Datatype|TOKEN] ")";
	public OutputBaseElements getOutputBaseAccess() {
		return pOutputBase;
	}
	
	public ParserRule getOutputBaseRule() {
		return getOutputBaseAccess().getRule();
	}

	//Permissions:
	//	name="PERMISSIONS" perms+=Permission* => "END";
	public PermissionsElements getPermissionsAccess() {
		return pPermissions;
	}
	
	public ParserRule getPermissionsRule() {
		return getPermissionsAccess().getRule();
	}

	//Permission:
	//	(name="VIEW" | name="EDIT" | name="RUN") ":" ("PUBLIC" | "PRIVATE" | cust_levs+=CustomPermissionLevel (","
	//	cust_levs+=CustomPermissionLevel)?) ";";
	public PermissionElements getPermissionAccess() {
		return pPermission;
	}
	
	public ParserRule getPermissionRule() {
		return getPermissionAccess().getRule();
	}

	//CustomPermissionLevel:
	//	("USER" | "GROUP") "(" vals+=Value ("," vals+=Value)* ")";
	public CustomPermissionLevelElements getCustomPermissionLevelAccess() {
		return pCustomPermissionLevel;
	}
	
	public ParserRule getCustomPermissionLevelRule() {
		return getCustomPermissionLevelAccess().getRule();
	}

	//GenerateSection:
	//	GenerateBodyInline | GenerateBodySalt | GenerateBodyKel;
	public GenerateSectionElements getGenerateSectionAccess() {
		return pGenerateSection;
	}
	
	public ParserRule getGenerateSectionRule() {
		return getGenerateSectionAccess().getRule();
	}

	//GenerateBodyInline:
	//	name="GENERATES" GEN_BLOCK;
	public GenerateBodyInlineElements getGenerateBodyInlineAccess() {
		return pGenerateBodyInline;
	}
	
	public ParserRule getGenerateBodyInlineRule() {
		return getGenerateBodyInlineAccess().getRule();
	}

	//GenerateBodySalt:
	//	name="GENERATES" "SALT" "(" TOKEN ")" ":" ("SCOREDSEARCH" | "PROFILE") => "ENDGENERATES";
	public GenerateBodySaltElements getGenerateBodySaltAccess() {
		return pGenerateBodySalt;
	}
	
	public ParserRule getGenerateBodySaltRule() {
		return getGenerateBodySaltAccess().getRule();
	}

	//GenerateBodyKel:
	//	name="GENERATES" "KEL" "(" TOKEN ")" => "ENDGENERATES";
	public GenerateBodyKelElements getGenerateBodyKelAccess() {
		return pGenerateBodyKel;
	}
	
	public ParserRule getGenerateBodyKelRule() {
		return getGenerateBodyKelAccess().getRule();
	}

	//VisualSection:
	//	section_name="VISUALIZE" name=TOKEN vis_ops=VisualSectionOptions? vis_elements+=Visualization+ => "END";
	public VisualSectionElements getVisualSectionAccess() {
		return pVisualSection;
	}
	
	public ParserRule getVisualSectionRule() {
		return getVisualSectionAccess().getRule();
	}

	//VisName:
	//	name=("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE" | "GRAPH" | "FORM" | "GROUP" | "SLIDER");
	public VisNameElements getVisNameAccess() {
		return pVisName;
	}
	
	public ParserRule getVisNameRule() {
		return getVisNameAccess().getRule();
	}

	//VisInputValue:
	//	InputSimpleTypes in_ops=InputOptions? ";";
	public VisInputValueElements getVisInputValueAccess() {
		return pVisInputValue;
	}
	
	public ParserRule getVisInputValueRule() {
		return getVisInputValueAccess().getRule();
	}

	//VisBasisParens:
	//	"(" input=VisBasis ")";
	public VisBasisParensElements getVisBasisParensAccess() {
		return pVisBasisParens;
	}
	
	public ParserRule getVisBasisParensRule() {
		return getVisBasisParensAccess().getRule();
	}

	//Visualization:
	//	type=VisName name=TOKEN parens=VisBasisParens? vis_op=VisualOptions? ";" | type=VisName name=TOKEN
	//	parens=VisBasisParens? vis_op=VisualOptions? input_val+=VisInputValue+ => "END";
	public VisualizationElements getVisualizationAccess() {
		return pVisualization;
	}
	
	public ParserRule getVisualizationRule() {
		return getVisualizationAccess().getRule();
	}

	//VisBasis:
	//	basis=[OutDataset|TOKEN] filter=VisFilter? quals=VisBasisQualifiers?;
	public VisBasisElements getVisBasisAccess() {
		return pVisBasis;
	}
	
	public ParserRule getVisBasisRule() {
		return getVisBasisAccess().getRule();
	}

	//VisFilter:
	//	"("+ vals+=Value+ ")";
	public VisFilterElements getVisFilterAccess() {
		return pVisFilter;
	}
	
	public ParserRule getVisFilterRule() {
		return getVisFilterAccess().getRule();
	}

	//VisBasisQualifiers:
	//	"{" funcs=Function ("," qfuncs+=QFunction)* "}";
	public VisBasisQualifiersElements getVisBasisQualifiersAccess() {
		return pVisBasisQualifiers;
	}
	
	public ParserRule getVisBasisQualifiersRule() {
		return getVisBasisQualifiersAccess().getRule();
	}

	//PosVizData:
	//	ECLfieldType | FieldDecl;
	public PosVizDataElements getPosVizDataAccess() {
		return pPosVizData;
	}
	
	public ParserRule getPosVizDataRule() {
		return getPosVizDataAccess().getRule();
	}

	//Function: / *vars=[PosVizData] |* / vals=Value | / *'-' vars=[PosVizData] |* / "-" vals=Value | AggFunction | "-"
	//	AggFunction | CountFunction | "-" CountFunction | "SCALE" "(" / *(vars=[PosVizData])|* / (CountFunction | AggFunction)
	//	"," type=INT ")";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//QFunction:
	//	Function | NestBasisQualifier;
	public QFunctionElements getQFunctionAccess() {
		return pQFunction;
	}
	
	public ParserRule getQFunctionRule() {
		return getQFunctionAccess().getRule();
	}

	//NestBasisQualifier:
	//	TOKEN VisBasisQualifiers;
	public NestBasisQualifierElements getNestBasisQualifierAccess() {
		return pNestBasisQualifier;
	}
	
	public ParserRule getNestBasisQualifierRule() {
		return getNestBasisQualifierAccess().getRule();
	}

	//CountFunction:
	//	"COUNT";
	public CountFunctionElements getCountFunctionAccess() {
		return pCountFunction;
	}
	
	public ParserRule getCountFunctionRule() {
		return getCountFunctionAccess().getRule();
	}

	//AggFunction:
	//	("SUM" | "AVE" | "MAX" | "MIN") "(" TOKEN ")";
	public AggFunctionElements getAggFunctionAccess() {
		return pAggFunction;
	}
	
	public ParserRule getAggFunctionRule() {
		return getAggFunctionAccess().getRule();
	}

	//VisualSectionOptions:
	//	":" vis_ops+=VisualSectionOption ("," vis_ops+=VisualSectionOption)*;
	public VisualSectionOptionsElements getVisualSectionOptionsAccess() {
		return pVisualSectionOptions;
	}
	
	public ParserRule getVisualSectionOptionsRule() {
		return getVisualSectionOptionsAccess().getRule();
	}

	//VisualSectionOption:
	//	(name="LABEL" | name="TITLE") "(" vals=Value ")" | name="ENABLE" "(" assigns=AssignList ")" | (name="EXPLORE" |
	//	name="PRIMARY");
	public VisualSectionOptionElements getVisualSectionOptionAccess() {
		return pVisualSectionOption;
	}
	
	public ParserRule getVisualSectionOptionRule() {
		return getVisualSectionOptionAccess().getRule();
	}

	//VizAssign:
	//	val_l=Value "=" val_r=ValueList;
	public VizAssignElements getVizAssignAccess() {
		return pVizAssign;
	}
	
	public ParserRule getVizAssignRule() {
		return getVizAssignAccess().getRule();
	}

	//VizAssignList:
	//	assigns+=VizAssign ("," assigns+=VizAssign)*;
	public VizAssignListElements getVizAssignListAccess() {
		return pVizAssignList;
	}
	
	public ParserRule getVizAssignListRule() {
		return getVizAssignListAccess().getRule();
	}

	//VizEnumDecl:
	//	name="ENUM" "(" assigns=VizAssignList ")";
	public VizEnumDeclElements getVizEnumDeclAccess() {
		return pVizEnumDecl;
	}
	
	public ParserRule getVizEnumDeclRule() {
		return getVizEnumDeclAccess().getRule();
	}

	//VisualOptions:
	//	":" vis_ops+=VisualOption ("," vis_ops+=VisualOption)*;
	public VisualOptionsElements getVisualOptionsAccess() {
		return pVisualOptions;
	}
	
	public ParserRule getVisualOptionsRule() {
		return getVisualOptionsAccess().getRule();
	}

	//VisualOption:
	//	(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="FIRST" |
	//	name="WEIGHT" | name="SIZE" | name="LEVELS" | name="LEVEL" | name="UID" | name="TYPE") "(" funcs+=Function ")" |
	//	(name="ICON" | name="FLAG" | name="TYPE") "(" funcs+=Function ("," decl=VizEnumDecl)? ")" |
	//	vis_cust=VisualCustomOption | name="COLLAPSE" | name="VISIBILITY" "(" visibility_op=VisibilityOption ")" |
	//	name="ENABLE" "(" assigns+=AssignList ")" | VisualCustomOption "(" funcs+=Function ("," funcs+=Function)* ")" |
	//	VisualMultival "(" funcs+=Function ("," funcs+=Function)* ")" | SelectOption | LinkOption;
	public VisualOptionElements getVisualOptionAccess() {
		return pVisualOption;
	}
	
	public ParserRule getVisualOptionRule() {
		return getVisualOptionAccess().getRule();
	}

	//SelectEvent:
	//	Value;
	public SelectEventElements getSelectEventAccess() {
		return pSelectEvent;
	}
	
	public ParserRule getSelectEventRule() {
		return getSelectEventAccess().getRule();
	}

	//SelectOptionMapping:
	//	TOKEN "->" TOKEN ("," TOKEN)*;
	public SelectOptionMappingElements getSelectOptionMappingAccess() {
		return pSelectOptionMapping;
	}
	
	public ParserRule getSelectOptionMappingRule() {
		return getSelectOptionMappingAccess().getRule();
	}

	//SelectOption:
	//	"SELECTS" "(" (SelectEvent ",")? maps+=SelectOptionMapping ("," maps+=SelectOptionMapping)* ")";
	public SelectOptionElements getSelectOptionAccess() {
		return pSelectOption;
	}
	
	public ParserRule getSelectOptionRule() {
		return getSelectOptionAccess().getRule();
	}

	//LinkOption:
	//	"LINK" "(" name=TOKEN ("," ops+=VisualOption)* ")";
	public LinkOptionElements getLinkOptionAccess() {
		return pLinkOption;
	}
	
	public ParserRule getLinkOptionRule() {
		return getLinkOptionAccess().getRule();
	}

	//VisualMultival:
	//	name="X" | name="Y" | name="COLOR" | name="RANGE" | name="FILTER" | name="LABEL" | name="VALUE" | name="SORT" |
	//	name="BRANCHES";
	public VisualMultivalElements getVisualMultivalAccess() {
		return pVisualMultival;
	}
	
	public ParserRule getVisualMultivalRule() {
		return getVisualMultivalAccess().getRule();
	}

	//VisibilityOption:
	//	name="MODAL" | name="VISIBLE";
	public VisibilityOptionElements getVisibilityOptionAccess() {
		return pVisibilityOption;
	}
	
	public ParserRule getVisibilityOptionRule() {
		return getVisibilityOptionAccess().getRule();
	}

	//VisualCustomOption:
	//	name=TOKEN;
	public VisualCustomOptionElements getVisualCustomOptionAccess() {
		return pVisualCustomOption;
	}
	
	public ParserRule getVisualCustomOptionRule() {
		return getVisualCustomOptionAccess().getRule();
	}

	//CustomSection:
	//	name="CUSTOM" cust_vals+=CustomValue* => "END";
	public CustomSectionElements getCustomSectionAccess() {
		return pCustomSection;
	}
	
	public ParserRule getCustomSectionRule() {
		return getCustomSectionAccess().getRule();
	}

	//CustomValue:
	//	TOKEN Value ";";
	public CustomValueElements getCustomValueAccess() {
		return pCustomValue;
	}
	
	public ParserRule getCustomValueRule() {
		return getCustomValueAccess().getRule();
	}

	//ResourceType:
	//	name="LOGICALFILE" | name="INDEX" | name="SUPERFILE" | name="ECL" | name="FILE" | name="IMAGE";
	public ResourceTypeElements getResourceTypeAccess() {
		return pResourceType;
	}
	
	public ParserRule getResourceTypeRule() {
		return getResourceTypeAccess().getRule();
	}

	//ResourceOption:
	//	("FONT" | "VALUE" | "DESCRIPTION" | "FILENAME" | "LABEL" | "URL" | "DALIIP" | "CLUSTER" | VisualCustomOption) "("
	//	vals=Value ")";
	public ResourceOptionElements getResourceOptionAccess() {
		return pResourceOption;
	}
	
	public ParserRule getResourceOptionRule() {
		return getResourceOptionAccess().getRule();
	}

	//ResourceOptions:
	//	res_ops+=ResourceOption ("," res_ops+=ResourceOption)*;
	public ResourceOptionsElements getResourceOptionsAccess() {
		return pResourceOptions;
	}
	
	public ParserRule getResourceOptionsRule() {
		return getResourceOptionsAccess().getRule();
	}

	//ResourceValue:
	//	Value ":" res_ops=ResourceOptions? ";";
	public ResourceValueElements getResourceValueAccess() {
		return pResourceValue;
	}
	
	public ParserRule getResourceValueRule() {
		return getResourceValueAccess().getRule();
	}

	//ResourceSection:
	//	name="RESOURCES" res_vals+=ResourceValue+ => "END";
	public ResourceSectionElements getResourceSectionAccess() {
		return pResourceSection;
	}
	
	public ParserRule getResourceSectionRule() {
		return getResourceSectionAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ECLNUMBEREDTYPE:
	//	("UNICODE" | "STRING" | "UNSIGNED" | "INTEGER" | "QSTRING" | "VARSTRING" | "VARUNICODE" | "REAL") "0".."9"*;
	public TerminalRule getECLNUMBEREDTYPERule() {
		return tECLNUMBEREDTYPE;
	} 

	//terminal ECLDECIMALTYPE:
	//	"DECIMAL" "0".."9"*;
	public TerminalRule getECLDECIMALTYPERule() {
		return tECLDECIMALTYPE;
	} 

	////terminal UTOKEN: 
	////	('_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'-')('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
	////;
	//terminal GEN_BLOCK:
	//	"INLINE"->"ENDGENERATES";
	public TerminalRule getGEN_BLOCKRule() {
		return tGEN_BLOCK;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
